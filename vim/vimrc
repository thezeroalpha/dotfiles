" vim: foldmethod=marker foldlevel=0
let mapleader=" "   " Set the mapleader to be space

" Plugins {{{1
" Installation {{{2
" Install vim-plug if needed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent execute "!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'junegunn/vader.vim'

" A color table with xterm color codes
Plug 'guns/xterm-color-table.vim', { 'on': 'Colors' }

" Simple commenting
Plug 'tpope/vim-commentary'

" Emmet but simpler
Plug 'rstacruz/sparkup', { 'for': ['html', 'javascript'] }

" Endwise - smart do-end, if-fi, if-end, case-esac, etc.
Plug 'tpope/vim-endwise'

" Sandwich - super useful plugin for surrounding stuff with quotes/brackets/tags
Plug 'machakann/vim-sandwich'

" Eunuch - shell commands but in vim
Plug 'tpope/vim-eunuch'

Plug 'tpope/vim-projectionist'

" A tag overview on the right side
Plug 'majutsushi/tagbar', { 'on': ['TagbarToggle', 'TagbarOpen'] }

" Personal hypertext files
Plug 'thezeroalpha/vimwiki' ", { 'on': '<Plug>VimwikiIndex', 'for': 'vimwiki' }

" Git wrapper from tpope
Plug 'tpope/vim-fugitive'

" Undo tree visualiser
Plug 'simnalamburt/vim-mundo', { 'on': 'MundoToggle' }

" Quickfix window mappings
Plug 'romainl/vim-qf'

" Repeat everything with '.'
Plug 'tpope/vim-repeat'

" Distraction-free editing
Plug 'junegunn/goyo.vim', { 'for': 'markdown', 'on': 'Goyo' }
Plug 'junegunn/limelight.vim', { 'for': 'markdown', 'on': 'Limelight' }

" Better CSV editing
Plug 'chrisbra/csv.vim', { 'for': 'csv' }

" Display ANSI color codes
Plug 'vim-scripts/AnsiEsc.vim', { 'on': 'AnsiEsc' }

" Disable hlsearch after finished searching
Plug 'romainl/vim-cool'

" Vim + latex
Plug 'lervag/vimtex', { 'for': ['latex', 'tex'] }

" Snippets
Plug 'SirVer/ultisnips'

" Improve K
Plug 'gastonsimone/vim-dokumentary'

" Open devdocs for a keyword
Plug 'romainl/vim-devdocs', { 'on': 'DD' }

" Fuzzy finder in vim
Plug 'junegunn/fzf', { 'dir': '$HOME/.dotfiles/tools/fzf', 'do': './install --all --xdg --no-fish'}
Plug 'junegunn/fzf.vim'

" Better abbrevation and substitution
Plug 'tpope/vim-abolish'

" Highlight hex colors
Plug 'chrisbra/colorizer', { 'on': ['ColorHighlight', 'ColorToggle'] }

" Pywal scheme in vim
Plug 'dylanaraps/wal.vim'

" Documentation skeleton generator
Plug 'kkoomen/vim-doge'

" Show git changes in the sign column
Plug 'airblade/vim-gitgutter'

" Bracket bindings for filetypes
Plug 'arp242/jumpy.vim'

" Substitute preview
Plug 'markonm/traces.vim'

" Omnifuncs
Plug 'myhere/vim-nodejs-complete', { 'for': 'javascript' }
Plug 'othree/html5.vim', { 'for': 'html' }
Plug 'vim-scripts/OmniCppComplete', { 'for': 'cpp' }
Plug 'vim-scripts/pythoncomplete', { 'for': 'python' }

" Alignment
Plug 'junegunn/vim-easy-align', { 'on': ['EasyAlign', 'LiveEasyAlign', '<Plug>(LiveEasyAlign)'] }
"
" Peek contents of registers
Plug 'junegunn/vim-peekaboo'

" Latex symbol to unicode
Plug 'joom/latex-unicoder.vim'

" Smooth ^U/^D scrolling
Plug 'psliwka/vim-smoothie'

" Asynchronous popery
Plug 'tpope/vim-dispatch', { 'on': ['Dispatch', 'Make', 'Maketab', 'Start', 'Spawn'] }

" Vimscript testing
Plug 'tpope/vim-scriptease', { 'for': 'vim' }

" Schemer - colorscheme creator
Plug 'thezeroalpha/vim-schemer', { 'for': 'schemer', 'on': ['<Plug>SchemerSynstack', '<Plug>SchemerEdit']}

" Make ins-completion relative to current file
Plug 'thezeroalpha/vim-relatively-complete'

" Select files with LF
Plug 'thezeroalpha/vim-lf'

" Unicode black magic
Plug 'segeljakt/vim-isotope'

" Lightweight REPL (my fork)
" upstream: https://github.com/axvr/zepl.vim.git
Plug 'thezeroalpha/zepl.vim', { 'on': ['Repl', 'ReplSend'], 'do': 'git remote add upstream https://github.com/axvr/zepl.vim.git' }

" Evaluate markdown code blocks
Plug 'gpanders/vim-medieval', { 'for': 'markdown' }

" Center the window vertically (like Goyo but keeps statusline/whatever)
Plug 'jmckiern/vim-venter', { 'on': 'Venter' }

" More text objects, seeking behavior, 'next' objects
Plug 'wellle/targets.vim'

" Edit files directly in quickfix window
Plug 'stefandtw/quickfix-reflector.vim'
call plug#end()
" }}}2
" Config {{{2
" Tagbar {{{3
" Maps
nnoremap <leader>tt :TagbarToggle<CR>
nnoremap <leader>to :TagbarOpen fj<CR>

" tagbar language definitions
let g:tagbar_type_vimwiki = {
          \   'ctagstype':'vimwiki'
          \ , 'kinds':['h:header']
          \ , 'sro':'&&&'
          \ , 'kind2scope':{'h':'header'}
          \ , 'sort':0
          \ , 'ctagsbin':'vwtags.py'
          \ , 'ctagsargs': 'default'
          \ }

let g:tagbar_type_go = {
      \ 'ctagstype' : 'go',
      \ 'kinds'     : [
      \ 'p:package',
      \ 'i:imports:1',
      \ 'c:constants',
      \ 'v:variables',
      \ 't:types',
      \ 'n:interfaces',
      \ 'w:fields',
      \ 'e:embedded',
      \ 'm:methods',
      \ 'r:constructor',
      \ 'f:functions'
      \ ],
      \ 'sro' : '.',
      \ 'kind2scope' : {
      \ 't' : 'ctype',
      \ 'n' : 'ntype'
      \ },
      \ 'scope2kind' : {
      \ 'ctype' : 't',
      \ 'ntype' : 'n'
      \ },
      \ 'ctagsbin'  : 'gotags',
      \ 'ctagsargs' : '-sort -silent'
      \ }
let g:tagbar_type_scss = {
      \ 'ctagstype' : 'scss',
      \ 'kinds' : [
      \ 'm:Mixins',
      \ 'f:Functions',
      \ 'v:Variables',
      \ 'c:Classes',
      \ 'i:IDs',
      \ 't:Tags',
      \ 'd:Media',
      \ 'p:Placeholders'
      \ ],
      \ 'sort': 0
      \ }
let g:tagbar_type_conf = {
      \ 'ctagstype' : 'lfrc',
      \ 'kinds' : [
      \ 'c:Commands',
      \ 'm:Maps'
      \ ],
      \ 'sort': 0
      \ }
let g:tagbar_type_zsh = {
      \ 'ctagstype' : 'zsh',
      \ 'kinds' : [
      \ 's:Source scripts',
      \ 'e:Environment variables',
      \ 'f:Functions',
      \ 'm:Mappings'
      \ ],
      \ 'sort': 0
      \ }
" Doge {{{3
let g:doge_mapping = '<leader>gd'
" Goyo {{{3
let g:goyo_width = "80%"
let g:goyo_height = "85%"
" Vimtex {{{3
let g:tex_flavor='latex'
let g:vimtex_view_method='general'
let g:vimtex_quickfix_mode=0
let g:tex_conceal='abdmg'
let g:vimtex_compiler_latexmk = {
      \ 'build_dir': 'build'
      \ }
" Ultisnips {{{3
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
let g:UltiSnipsSnippetDirectories = ['~/.dotfiles/vim/ultisnips']
let g:UltiSnipsEditSplit = "vertical"
cabbrev USE UltiSnipsEdit
" Complete ultisnips with <C-x><C-u>, which is coincidentally the same mapping as user completion
" (custom function btw)
set completefunc=ultisnips_complete#ListSnippets
" Dokumentary {{{3
" Improve what K does
let g:dokumentary_docprgs = {'ruby': 'ri {0} | col -b'}
" Abolish {{{3
" Work with variants of words easily
let g:abolish_save_file = '"$HOME"/.dotfiles/vim/abolish_save_file.vim'
" Fzf {{{3
set rtp+="$HOME"/.dotfiles/tools/fzf
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction
let g:fzf_action = {
      \ 'ctrl-f': function('s:build_quickfix_list'),
      \ 'ctrl-t': 'tabedit',
      \ 'ctrl-p': 'split',
      \ 'ctrl-v': 'vsplit' }
let g:fzf_layout = {'window': { 'width': 0.9, 'height': 0.4 } }
let g:fzf_preview_window = 'right:60%'
" Jump to existing buffer/window if possible
let g:fzf_buffers_jump = 1

nnoremap <leader>F :Files<CR>
nnoremap <leader><c-f> :Files<space>
nnoremap <leader>B :Buffers<CR>
nnoremap <leader>G :Lines<CR>
nnoremap <leader>W :BLines<CR>
nnoremap <leader>? :Helptags<CR>
nnoremap <leader>T :Tags<CR>
nnoremap <leader>/ :Ag<CR>
nnoremap <leader>M :Marks<CR>
nnoremap <leader>; :History:<CR>

" Search for Todos/Fixmes
command! Todo Ag ((TO ?DO)|FIXME):?<space>?
nnoremap <leader>! :Todo<CR>

" Set a filetype
cabbrev setf Filetypes

command! Scripts call fzf#run(fzf#wrap({'source': 'command find "$(readlink ~/.scripts)" -type f -or -type l -not -ipath "*/.git/*"', 'options': '--multi --reverse --inline-info --prompt="scripts> "', 'sink': 'sp'}))
command! Configs call fzf#run(fzf#wrap({'source': 'command find ~/.dotfiles -type f ! -ipath "*/.git/*" ! -ipath "*/bin/*" ! -ipath "*/oh-my-zsh/*" ! -name ".DS_Store"', 'options': '--multi --reverse --inline-info --prompt="configs> "', 'sink': 'sp'}))
" Vimwiki {{{3
let tlist_vimwiki_settings = 'wiki;h:Headers'
let g:vimwiki_table_mappings = 0   " avoid vimwiki conflict with Ultisnips

let wiki = {}
let wiki.path = '/Users/alex/Dropbox/vimwiki/'
let wiki.path_html = '/Users/alex/Dropbox/vimwiki_html'
let wiki.template_path = '/Users/alex/Dropbox/vimwiki/templates'
let wiki.template_ext = '.tpl'
let wiki.syntax = 'default'
let wiki.ext = '.txt'
let g:vimwiki_list = [wiki]
let g:vimwiki_global_ext = 1
let g:vimwiki_ext2syntax = {'.wiki': 'default'}

nnoremap <leader>wc :VimwikiCheckLinks<CR>
nmap <leader>ww <Plug>VimwikiIndex
" Sessions {{{3
nmap <leader>ss <Plug>SaveSession
nmap <leader>sl <Plug>LoadSession
nmap <leader>sd <Plug>DeleteSession
nmap <leader>sq <Plug>CloseSession
" Sparkup {{{3
let g:sparkupExecuteMapping = '<C-x><C-e><CR>'
let g:sparkupNextMapping = '<C-x><C-e><tab>'
" Haskell {{{3
let hs_highlight_delimiters = 1
let hs_highlight_boolean = 1
let hs_highlight_types = 1
let hs_highlight_more_types = 1
" EasyAlign {{{3
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(LiveEasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(LiveEasyAlign)

" Keep :ascii as a map
nnoremap <leader>ga :<c-u>ascii<cr>
" Peekaboo {{{3
let g:peekaboo_compact=1
" Mundo {{{3
nnoremap <leader>u :MundoToggle<CR>
" Vim-qf {{{3
nmap <leader>qn <Plug>(qf_qf_next)
nmap <leader>qp <Plug>(qf_qf_previous)
nmap <leader>qf <Plug>(qf_qf_toggle)
" Disable auto-open because it interferes with Dispatch reverting makeprg
" See here https://github.com/tpope/vim-dispatch/issues/254
let g:qf_auto_open_quickfix = 0
" Dispatch {{{3
" Disable default maps
let g:dispatch_no_maps = 1

" Only enable those I'll actually use
nnoremap `<CR> :Dispatch<CR>
nnoremap '<CR> :Start<CR>
" Sandwich {{{3
" Use mappings from surround.vim
runtime macros/sandwich/keymap/surround.vim

" Copy the default recipes
let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)

" And add bracket-with-space from surround.vim
let g:sandwich#recipes += [
      \   {'buns': ['{ ', ' }'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': ['}']},
      \   {'buns': ['{\s*', '\s*}'],   'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': ['}']},
      \   {'buns': ['[ ', ' ]'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': [']']},
      \   {'buns': ['\[\s*', '\s*\]'], 'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': [']']},
      \   {'buns': ['( ', ' )'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': [')']},
      \   {'buns': ['(\s*', '\s*)'],   'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': [')']},
      \   {'buns': ['(', ')'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': ['(', 'b']},
      \   {'buns': ['(', ')'], 'nesting': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': ['(', 'b']}
      \ ]
" netrw {{{3
let g:netrw_banner = 0                              " hide the banner
let g:netrw_fastbrowse = 2                          " only get dir list if not seen, or manually refreshed
let g:netrw_liststyle = 0                           " thin listing
let g:netrw_winsize = 25                            " open at 25% size
let g:netrw_keepdir = 0                             " keep the current directory the same as the browsing directory.
let g:netrw_retmap = 0                              " double-click to return to browsing
let g:netrw_list_hide = &wildignore                 " hide everything in &wildignore
let g:netrw_list_hide .= ',\(^\|\s\s\)\zs\.\S\+'    " as well as dotfiles
let g:netrw_special_syntax = 1                      " use special syntax groups for certain files in browser
" latex-unicoder {{{3
let g:unicoder_cancel_normal = 1
let g:unicoder_cancel_insert = 1
let g:unicoder_cancel_visual = 1
inoremap <C-l> <Esc>:call unicoder#start(1)<CR>
" colorizer {{{3
let g:colorizer_colornames = 0
" Schemer {{{3
" List color group
nmap <C-P> <Plug>SchemerSynstack
nmap <leader><C-E><C-L> <Plug>SchemerEdit
" Relatively complete {{{3
" Replace default file completion with 'smart' relative complete
imap <C-x><C-f> <Plug>RelativelyCompleteFile
" Isotope {{{3
let g:isotope_use_default_mappings = 0
" Zepl {{{3
augroup zepl
  autocmd!
  autocmd FileType python     let b:repl_config = { 'cmd': 'python3' }
  autocmd FileType javascript let b:repl_config = { 'cmd': 'node' }
  autocmd FileType haskell      let b:repl_config = { 'cmd': 'ghci' }
  autocmd FileType ruby      let b:repl_config = { 'cmd': 'irb' }
augroup END
nnoremap gzr :Repl<CR>
" Medieval {{{3
let g:medieval_langs = ['python=python3', 'ruby', 'sh', 'bash', 'haskell=ghci', 'javascript=node']
" LF {{{3
nmap <leader>\ <Plug>LfEdit
nmap <leader><c-\> <Plug>LfSplit
" Ada {{{3
let g:ada_standard_types = 1
let g:ada_space_errors = 1
let g:ada_begin_preproc = 1
let g:ada_omni_with_keywords = 1
" }}}1
" General {{{1
" Set the colors
" Use true color
" Set Vim-specific sequences for RGB colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

if has('termguicolors')
  set termguicolors
endif

if filereadable($HOME."/.config/dark-theme")
  colorscheme junipero
else
  colorscheme jokull
endif

" where to find tags files
set tags=./tags;~,tags,~/.tags
if has("path_extra")
  " If compiled with path_extra, search for .git/tags upwards in the tree
  "   and stop searching at $HOME
  let &tags = &tags.',.git/tags;~'
else
  let &tags = &tags.',.git/tags'
endif

" follow the 'ignorecase' option when looking for tags
set tagcase=followic

" dictionary files, in order (custom words should appear at the top)
" remember, to generate a wordlist from spellcheck, do :spelldump
set dictionary=~/.vim/words/dict/global/custom.txt
set dictionary+=~/.vim/words/dict/global/3of6all.txt
set dictionary+=/usr/share/dict/words

" thesaurus file
set thesaurus=~/.vim/words/thesaurus/mthesaur.txt

" matchit.vim is default, why not enable it
runtime macros/matchit.vim

" same with :Man
" I'm lazy-loading this because it really affects my startup time.
" I'm not the only one: https://www.reddit.com/r/vim/comments/emx856/lazy_loading_man_page_plugin/
silent! command! -bar -nargs=* Man
      \ delcommand Man |
      \ runtime ftplugin/man.vim |
      \ Man <args>

" For editing binaries
set binary

" No swp please, I save all the time
set noswapfile

" make regexes consistent with other programs (extended)
set magic

" global setting for directories to search for files (e.g. for gf)
" . == directory of current file, ,, == current working directory
set path=.,"$HOME"/.dotfiles/vim/**,,

" global suffixes to add when looking for files (configured otherwise on per-language basis)
set suffixesadd=.vim

" include, includeexpr, define: very language-specific, so no default global value

" global patterns to ignore in wildmenu
set wildignore=*.swp
set wildignorecase

" Persistent undos (useful for plugins too){{{
if has('persistent_undo')
  let myUndoDir = expand('$HOME/.vim' . '/undo')
  silent! call mkdir(myUndoDir, 'p')
  let &undodir = myUndoDir
  set undofile
endif
" }}}

" Hide buffers instead of closing
set hidden

" Dont redraw while executing macros
set lazyredraw

" Encoding & formats
set encoding=utf-8 nobomb
set fileformats=unix,dos,mac

" Number of lines to use for command line
" (this fixes the 'press  to continue' thing on :help)
set cmdheight=1

" Send more characters at a given time
set ttyfast

" Show partial command on last line
set showcmd

" Don't show current mode (it's in the statusline)
set noshowmode
" Command completion
set wildmenu

" Allow the mouse, good for e.g. resizing splits
set mouse=a
" fix issue with not being able to drag resize split windows in tmux
if &term =~ '^screen' || $TMUX !=# ""
  set ttymouse=xterm2
endif

" How to split new windows
set splitbelow splitright

" Allow per-file settings
set modeline
set modelines=5     "within the first/last 5 lines

" Allow italics
set t_ZH=[3m
set t_ZR=[23m

" Since belloff isn't always an option
if exists("&belloff")
  set belloff=showmatch,esc,shell,wildmode,backspace   " Disable beeping if no match is found
endif

" Command-line autocompletion
set wildmode=longest:list,full

" Add everything to sessions
set sessionoptions=buffers,curdir,folds,globals,localoptions,options,resize,tabpages

" Use ag for grepping
set grepprg=ag\ --vimgrep
set updatetime=100
" }}}1
" Editor {{{1
" In general, don't want anything concealed
if has('conceallevel')
  set conceallevel=0
endif
"
" Change cursor shape between insert and normal mode in iTerm2.app
if $TERM_PROGRAM =~ "iTerm"
  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
    let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
  endif
endif

" Highlight current line
set cursorline

" Reduce waiting on keys (like esc)
set timeoutlen=1000 ttimeoutlen=50

" Wrap settings - no wrap by default
set nowrap
set textwidth=0
set wrapmargin=0
set linebreak " break at &breakat
" Continue wrapped line on same indent as previous
if has('breakindent')
  set breakindent
  set breakindentopt+=shift:3
endif

" Default formatoptions:
" - q: allow gq
" - n: recognise numbered lists
" - l: don't break long lines in insert mode
" - j: remove comment leader when joining
set formatoptions=qnlj

" Numbered lines
set number
set numberwidth=3
set relativenumber

" with a smart tab
set smarttab

" and 1 tab == 2 spaces
set tabstop=8       " visual length of \t in spaces, should be left at 8
set expandtab       " use spaces instead of tabs
set softtabstop=4   " 4 spaces inserted when TAB pressed
set shiftwidth=2    " 2 spaces when >>
set shiftround      " always shift by multiple of shiftwidth

" Auto indent when starting new line
set autoindent
set copyindent      " copy structure of other indents whn autoindenting

" Enable indenting based on filetype
filetype plugin indent on

" Syntax highlighting
syntax on

" Enable fenced code highlighting in markdown (tpope's plugin, ships with vim)
let g:markdown_fenced_languages = ['html', 'python', 'ruby', 'bash=sh', 'map', 'vim', 'c']
" Enable markdown folding
let g:markdown_folding = 1


" Folding on indentation
set foldmethod=indent
set foldlevelstart=5      " start with up to 5 levels open
set foldnestmax=10        " unless callback-hell JS

" Show matching brackets
set showmatch
set matchtime=2

" Searching
set hlsearch    " highlight matches
set incsearch   " search while typing
set ignorecase  " ignore case generally
set smartcase   " but not if searching for capital

" Backspace tweaks
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" Complete from current buffer, other windows, buffers, unloaded buffers, tags,
"   current and included files, and dictionary if spell is set
set complete=.,w,b,u,t,i,kspell
" Use popup menu, also when there is only one match, don't insert until the user selects
"   a match, don't select anything automatically.
set completeopt=menu,menuone,preview

nnoremap <silent><expr> <leader># ":set ".(&relativenumber?'norelativenumber number':'relativenumber number')."<CR>"

set omnifunc=syntaxcomplete#Complete

" Keep cursor off top and bottom of screen
set scrolloff=5

" Which formats to use for incrementing/decrementing
set nrformats=hex,bin

" We write posix shell scripts
let g:is_posix = 1
" }}}
" Commands {{{1
command! NoteP vimgrep /NOTE\C/ **/*.* | copen
command! Note vimgrep /NOTE\C/ % | copen
command! FixP vimgrep /FIXME\C/ **/*.* | copen
command! Fix vimgrep /FIXME\C/ % | copen
command! ListFileTypes echo glob($VIMRUNTIME . '/syntax/*.vim')
command! CD cd %:p:h
command! LCD lcd %:p:h
command! TCD tcd %:p:h
command! Maketab set noet ts=2 | %retab!
command! Diff w !diff % -
command! Diffg w !git diff % -
command! Fuckwindows %s///g
command! Hexedit %!xxd
command! Unhex %!xxd -r
command! JsonSimplifyObject %s/^\(\s\{10}\){\n\s\{12\}\(.*\)\n\s\{10\}}\(,\?\)/\1{ \2 }\3
command! BeautifyJson %!python -m json.tool
command! Dos2unix %!dos2unix
command! -nargs=1 Cheat terminal curl cheat.sh/<args>
command! Reveal exe "silent !open ".shellescape(expand("%:p:h")) | redraw!
command! Softwrap setlocal wrap formatoptions-=cat
command! Hardwrap setlocal nowrap formatoptions+=cat
command! Syncwin windo set scrollbind! cursorbind!
command! EF exe "split $HOME/.vim/after/ftplugin/".&filetype.".vim"
command! -nargs=1 Img
      \ exe "r! find ".shellescape(expand("%:p:h"))." -maxdepth ".<args>." -type f -exec file --mime-type '{}' \\+"
      \ ."| awk -F: '$2 ~ /image\\//{print $1}'"
      \ ."| sxiv -qto - 2>/dev/null"

" Fat finger fixes/convenience abbreviations
cnoreabbrev E Explore
cnoreabbrev Colors XtermColorTable
cnoreabbrev lset setl
cnoreabbrev sudow w !sudo tee > /dev/null %
cnoreabbrev hg helpgrep
cnoreabbrev gitr system("git root")

if has('terminal')
  cnoreabbrev tt tab terminal
  " ++close means close when process ends
  "   (so that I don't get a hanging term buffer)
  cnoreabbrev wt terminal ++close
  cnoreabbrev tm terminal ++close man
  cnoreabbrev tf terminal ++close lf
  cnoreabbrev tn terminal ++close joplin
  command! Tuir tab terminal tuir
endif
" }}}
" Digraphs {{{1
exe 'digraphs o+ ' .. 0x2295
exe 'digraphs O+ ' .. 0x2a01
exe 'digraphs e$ ' .. 0x20ac
exe 'digraphs \|> ' .. 0x21a6
exe 'digraphs [[ ' .. 0x27e6
exe 'digraphs ]] ' .. 0x27e7
" Mappings {{{1
" So I don't have to mash shift all the time
nnoremap ; :
vnoremap ; :

if has('terminal')
  tnoremap <C-w>; <C-w>:
endif

" To keep the old functionality of ;
nnoremap : ;

" Disable q: cuz I hate it
" (also C-F does the same)
nnoremap q: <Nop>

" Normal mode shortcuts
nnoremap <leader>b :ls<CR>:b<Space>

" Retain visual mode after > and <
vnoremap < <gv
vnoremap > >gv

" visual j/k
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
vnoremap j gj
vnoremap k gk
vnoremap gj j
vnoremap gk k

" Move visual block
xnoremap D :m '>+1<CR>gv=gv
xnoremap U :m '<-2<CR>gv=gv

" and don't break my colours (U for 'unfuck my screen please')
nnoremap U :syntax sync fromstart<CR>:redraw!<CR>

" 'zoom to head level'
nnoremap zh mzzt10<c-u>`z

" Reindent the file
nnoremap <leader>= mlgg=G`lzz

" Tab mappings
nnoremap <C-t> :tabnew<CR>
nnoremap <C-c> :tabclose<CR>
nnoremap <leader>th :tabmove -1<CR>
nnoremap <leader>tl :tabmove +1<CR>

" Window resizing mappings
nnoremap <C-k> <C-w>+
nnoremap <C-j> <C-w>-
nnoremap <C-h> <C-W><
nnoremap <C-l> <C-W>>

" Delete hidden buffers
nmap <leader>dh <Plug>DeleteHiddenBuffers

" Switch to alernative buffer
nnoremap <leader>s<leader> :b#<CR>

" Show hidden symbols
nnoremap <leader>hs :set list!<CR>

" List marks
nnoremap <leader>mm :<C-u>marks<CR>:normal! `
nnoremap <leader>ml :<C-u>marks a-z<CR>:normal! `


" Map '0' to act as '^' on first press and '0' on second
nnoremap <expr> <silent> 0 col('.') == match(getline('.'),'\S')+1 ? '0' : '^'

" Highlight last inserted text
nnoremap gV `[v`]

" Save in insert mode
inoremap <C-Z> <C-o>:w<CR>

" Set the foldlevel
nnoremap zn :set foldlevel=
nnoremap zs :exe "set foldlevel=".foldlevel(line('.'))<CR>

" Config edit mappings
" Why :drop? It uses the file if it's already open.
nnoremap <leader><C-E><C-V> :DropToFoldedVimrc<CR>zXgg
nnoremap <leader><C-E><C-A> :DropToFoldedVimrc<CR>zXgg/^" Autocommands {{<CR>:noh<CR>za
nnoremap <leader><C-E><C-C> :DropToFoldedVimrc<CR>zXgg/Commands {{<CR>:noh<CR>za
nnoremap <leader><C-E><C-E> :DropToFoldedVimrc<CR>zXgg/Editor {{<CR>:noh<CR>za
nnoremap <leader><C-E><C-G> :DropToFoldedVimrc<CR>zXgg/General {{<CR>:noh<CR>za
nnoremap <leader><C-E><C-M> :DropToFoldedVimrc<CR>zXgg/Mappings {{<CR>:noh<CR>za
nnoremap <leader><C-E><C-P><C-I> :DropToFoldedVimrc<CR>zXgg/Plugins {{<CR>:noh<CR>za/Installation {{<CR>:noh<CR>za
nnoremap <leader><C-E><C-P><C-C> :DropToFoldedVimrc<CR>zXgg/Plugins {{<CR>:noh<CR>za/Config {{<CR>:noh<CR>za
nnoremap <leader><C-E><C-U> :UltiSnipsEdit<CR>

" Yank to clipboard
nnoremap <leader>d "+d
vnoremap <leader>d "+d
nnoremap <leader>D "+D
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>p "+p
nnoremap <leader>P "+P
nnoremap <leader>n "_
vnoremap <leader>n "_
nnoremap <leader>yy "+yg_
nnoremap <leader>y<leader> :<c-u>let @*=@0<CR>
nnoremap Y y$

" Insert lines without moving cursor and going into insert mode
nnoremap <leader>o m`o<esc>``
nnoremap <leader>O m`O<esc>``

" Custom session maps
nnoremap <leader>ss :call sessions#SaveSession()<CR>
nnoremap <leader>sl :call sessions#LoadSession()<CR>
nnoremap <leader>sd :call sessions#DeleteSession()<CR>
nnoremap <leader>sq :call sessions#CloseSession()<CR>

" native file browsing
nnoremap <leader>f  :Lexplore<CR>

" Strip trailing whitespace (silent makes it so nothing is echoed)
nmap <silent> <leader>$ <Plug>StripTrailingWhitespace

" Run selected commands (again, silent)
vmap <silent> <leader><CR> <Plug>VisualRunCommands

" Buffer switching
nnoremap H :bprevious<CR>
nnoremap L :bnext<CR>

" Arg switching
nnoremap <leader>H :previous<CR>
nnoremap <leader>L :next<CR>


" Correct the last spelling error
inoremap <expr> <C-x>s &spell ? "<c-g>u<Esc>[s1z=`]a<c-g>u" : ""

" Make-ing (use Dispatch if enabled)
nnoremap <leader>m? :set makeprg<CR>
nnoremap <leader>mm :Make<CR>
nnoremap <leader>mc :Make clean<CR>

" If Dispatch not used
" :silent make<CR>\|:redraw!<CR>\|:cwindow<CR>
" :silent make clean<CR>\|:redraw!<CR>

" Vmap for searching in selection
vnoremap <leader>/ <esc>/\%V

" Allow scrolling popup menus with the mouse
if has('mouse')
  inoremap <expr> <ScrollWheelUp> pumvisible() ? "<C-p>" : "<Esc><ScrollWheelUp>"
  inoremap <expr> <ScrollWheelDown> pumvisible() ? "<C-n>" : "<Esc><ScrollWheelDown>"
endif

" 'Zoom' the current buffer in a new tab
nnoremap <C-w>Z :tab split<CR>

" Go to line:column
nnoremap <leader>gg :call input("go line:col> ")->split(":")->cursor()<CR>

" Which commit introduced this line?
nnoremap <silent><Leader>gw :call setbufvar(winbufnr(popup_atcursor(systemlist("cd " . shellescape(fnamemodify(resolve(expand('%:p')), ":h")) . " && git log --no-merges -n 1 -L " . shellescape(line("v") . "," . line(".") . ":" . resolve(expand("%:p")))), { "padding": [1,1,1,1], "pos": "botleft", "wrap": 0, "highlight": "StatusLine"})), "&filetype", "git")<CR>

" Avoid paste hijacking in insert mode
inoremap <c-r> <c-r><c-o>

" Up/down errors on the command line search for commands starting with current
" string. I want <c-n/p> to do the same.
cnoremap <c-p> <up>
cnoremap <c-n> <down>
" Autocommands {{{1
if has('autocmd')
  augroup vimrc_sets
    autocmd!
    autocmd InsertEnter * setlocal nocursorline
    autocmd InsertLeave * setlocal cursorline
    autocmd ColorScheme * highlight ColorColumn ctermbg=233
  augroup END
  augroup vimrc_commands
    autocmd!
    autocmd BufWritePre * silent StripTrailingWhitespace

  augroup END
endif
" }}}
