" vim: foldmethod=marker foldlevel=0
let mapleader=" "   " Set the mapleader to be space
" Plugins {{{
" Installation {{{
" Install vim-plug if needed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent execute "!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" A color table with xterm color codes
Plug 'guns/xterm-color-table.vim'

" Simple commenting
Plug 'tpope/vim-commentary'

" Emmet but simpler
Plug 'rstacruz/sparkup'

" Endwise - smart do-end, if-fi, if-end, case-esac, etc.
Plug 'tpope/vim-endwise'

" Sandwich - super useful plugin for surrounding stuff with quotes/brackets/tags
Plug 'machakann/vim-sandwich'

" Eunuch - shell commands but in vim
Plug 'tpope/vim-eunuch'

" A tag overview on the right side
Plug 'majutsushi/tagbar'

" Personal hypertext files
Plug 'vimwiki/vimwiki'

" Git wrapper from tpope
Plug 'tpope/vim-fugitive'

" Undo tree visualiser
Plug 'simnalamburt/vim-mundo'

" Quickfix window mappings
Plug 'romainl/vim-qf'

" Repeat everything with '.'
Plug 'tpope/vim-repeat'

" Distraction-free editing
Plug 'junegunn/goyo.vim'

" Better CSV editing
Plug 'chrisbra/csv.vim'

" Display ANSI color codes
Plug 'vim-scripts/AnsiEsc.vim'

" Disable hlsearch after finished searching
Plug 'romainl/vim-cool'

" Vim + latex
Plug 'lervag/vimtex'

" Snippets
Plug 'SirVer/ultisnips'

" Improve K
Plug 'gastonsimone/vim-dokumentary'

" Open devdocs for a keyword
Plug 'romainl/vim-devdocs'

" Fuzzy finder in vim
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Better abbrevation and substitution
Plug 'tpope/vim-abolish'

" An improved grep
Plug 'rking/ag.vim'

" Highlight hex colors
Plug 'chrisbra/colorizer'

" Pywal scheme in vim
Plug 'dylanaraps/wal.vim'

" Documentation skeleton generator
Plug 'kkoomen/vim-doge'

" Show git changes in the sign column
Plug 'airblade/vim-gitgutter'

" Bracket bindings for filetypes
Plug 'arp242/jumpy.vim'

" Substitute preview
Plug 'markonm/traces.vim'

" Omnifuncs
Plug 'myhere/vim-nodejs-complete'
Plug 'othree/html5.vim'
Plug 'vim-scripts/OmniCppComplete'
Plug 'vim-scripts/pythoncomplete'

" Alignment
Plug 'junegunn/vim-easy-align'
"
" Peek contents of registers
Plug 'junegunn/vim-peekaboo'

" Latex symbol to unicode
Plug 'joom/latex-unicoder.vim'

" Smooth ^U/^D scrolling
Plug 'psliwka/vim-smoothie'

" Asynchronous popery
Plug 'tpope/vim-dispatch'

" &path for filetypes
Plug 'tpope/vim-apathy'

" easier markdown-style tables
Plug 'dhruvasagar/vim-table-mode'
call plug#end()
" }}}
" Config {{{
" Tagbar {{{
" Maps
nnoremap <leader>tt :TagbarToggle<CR>
nnoremap <leader>to :TagbarOpen fj<CR>

" tagbar language definitions
let g:tagbar_type_vimwiki = {
          \   'ctagstype':'vimwiki'
          \ , 'kinds':['h:header']
          \ , 'sro':'&&&'
          \ , 'kind2scope':{'h':'header'}
          \ , 'sort':0
          \ , 'ctagsbin':'vwtags.py'
          \ , 'ctagsargs': 'default'
          \ }

let g:tagbar_type_go = {
      \ 'ctagstype' : 'go',
      \ 'kinds'     : [
      \ 'p:package',
      \ 'i:imports:1',
      \ 'c:constants',
      \ 'v:variables',
      \ 't:types',
      \ 'n:interfaces',
      \ 'w:fields',
      \ 'e:embedded',
      \ 'm:methods',
      \ 'r:constructor',
      \ 'f:functions'
      \ ],
      \ 'sro' : '.',
      \ 'kind2scope' : {
      \ 't' : 'ctype',
      \ 'n' : 'ntype'
      \ },
      \ 'scope2kind' : {
      \ 'ctype' : 't',
      \ 'ntype' : 'n'
      \ },
      \ 'ctagsbin'  : 'gotags',
      \ 'ctagsargs' : '-sort -silent'
      \ }
let g:tagbar_type_markdown = {
      \ 'ctagstype' : 'markdown',
      \ 'kinds' : [
      \ 'c:Heading L1',
      \ 's:Heading L2',
      \ 'S:Heading L3',
      \ 't:Heading L4',
      \ 'T:Heading L5',
      \ 'u:Heading L6'
      \ ],
      \ 'sort': 0
      \ }

let g:tagbar_type_scss = {
      \ 'ctagstype' : 'scss',
      \ 'kinds' : [
      \ 'm:Mixins',
      \ 'f:Functions',
      \ 'v:Variables',
      \ 'c:Classes',
      \ 'i:IDs',
      \ 't:Tags',
      \ 'd:Media',
      \ 'p:Placeholders'
      \ ],
      \ 'sort': 0
      \ }
let g:tagbar_type_conf = {
      \ 'ctagstype' : 'lfrc',
      \ 'kinds' : [
      \ 'c:Commands',
      \ 'm:Maps'
      \ ],
      \ 'sort': 0
      \ }
let g:tagbar_type_zsh = {
      \ 'ctagstype' : 'zsh',
      \ 'kinds' : [
      \ 's:Source scripts',
      \ 'e:Environment variables',
      \ 'f:Functions',
      \ 'm:Mappings'
      \ ],
      \ 'sort': 0
      \ }
" }}}
" Doge {{{
let g:doge_mapping = '<leader>gd'
" }}}
" Goyo {{{
let g:goyo_width = "80%"
let g:goyo_height = "85%"
" }}}
" Vimtex {{{
let g:tex_flavor='latex'
let g:vimtex_view_method='general'
let g:vimtex_quickfix_mode=0
let g:tex_conceal='abdmg'
" }}}
" Ultisnips {{{
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
let g:UltiSnipsSnippetDirectories = [$DOTFILES.'/vim/ultisnips']
let g:UltiSnipsEditSplit = "vertical"
cabbrev USE UltiSnipsEdit
" }}}
" Dokumentary {{{
" Improve what K does
let g:dokumentary_docprgs = {'ruby': 'ri {0} | col -b'}
" }}}
" Abolish {{{
" Work with variants of words easily
let g:abolish_save_file = $DOTFILES.'/vim/abolish_save_file.vim'
" }}}
" Ag {{{
nnoremap <leader>/ :Ag<space>
" }}}
" Fzf {{{
set rtp+=~/.fzf
let g:fzf_action = {
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-i': 'split',
      \ 'ctrl-v': 'vsplit' }
nnoremap <leader>F :Files<CR>
nnoremap <leader>B :Buffers<CR>
nnoremap <leader>G :Lines<CR>
nnoremap <leader>T :Helptags<CR>
" }}}
" Vimwiki {{{
let tlist_vimwiki_settings = 'wiki;h:Headers'
let g:vimwiki_table_mappings = 0   " avoid vimwiki conflict with Ultisnips

let wiki = {}
let wiki.path = '/Users/alex/Dropbox/vimwiki/'
let wiki.path_html = '/Users/alex/Dropbox/vimwiki_html'
let wiki.template_path = '/Users/alex/Dropbox/vimwiki/templates'
let wiki.template_ext = '.tpl'
let wiki.syntax = 'default'
let wiki.ext = '.txt'
let g:vimwiki_list = [wiki]
let g:vimwiki_global_ext = 0
let g:vimwiki_ext2syntax = {'.wiki': 'default'}

nnoremap <leader>wc :VimwikiCheckLinks<CR>
" }}}
" Sessions {{{
nmap <leader>ss <Plug>SaveSession
nmap <leader>sl <Plug>LoadSession
nmap <leader>sd <Plug>DeleteSession
nmap <leader>sq <Plug>CloseSession
" }}}
" Sparkup {{{
let g:sparkupExecuteMapping = '<C-x><C-e><CR>'
let g:sparkupNextMapping = '<C-x><C-e><tab>'
" }}}
" Haskell {{{
let hs_highlight_delimiters = 1
let hs_highlight_boolean = 1
let hs_highlight_types = 1
let hs_highlight_more_types = 1
" }}}
" EasyAlign {{{
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(LiveEasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(LiveEasyAlign)
" }}}
" Peekaboo {{{
let g:peekaboo_compact=1
" }}}
" Mundo {{{
nnoremap <leader>u :MundoToggle<CR>
" }}}
" Vim-qf {{{
nmap <leader>qn <Plug>(qf_qf_next)
nmap <leader>qp <Plug>(qf_qf_previous)
nmap <leader>qf <Plug>(qf_qf_toggle)
" Disable auto-open because it interferes with Dispatch reverting makeprg
" See here https://github.com/tpope/vim-dispatch/issues/254
let g:qf_auto_open_quickfix = 0
" }}}
" Dispatch {{{
" Disable default maps
let g:dispatch_no_maps = 1

" Only enable those I'll actually use
nnoremap `<CR> :Dispatch<CR>
nnoremap '<CR> :Start<CR>
" }}}
" Table-mode {{{
let g:table_mode_map_prefix = "<leader><bar>"
" }}}
" Sandwich {{{
" Use mappings from surround.vim
runtime macros/sandwich/keymap/surround.vim

" Copy the default recipes
let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)

" And add bracket-with-space from surround.vim
let g:sandwich#recipes += [
      \   {'buns': ['{ ', ' }'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': ['}']},
      \   {'buns': ['[ ', ' ]'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': [']']},
      \   {'buns': ['( ', ' )'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': [')']},
      \   {'buns': ['{\s*', '\s*}'],   'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': ['}']},
      \   {'buns': ['\[\s*', '\s*\]'], 'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': [']']},
      \   {'buns': ['(\s*', '\s*)'],   'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': [')']},
      \ ]
" }}}
" }}}
" }}}
" General {{{
" Set the colors
" Use true color
" Set Vim-specific sequences for RGB colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

if has('termguicolors')
  set termguicolors
endif

if system("osascript -e 'tell application \"System Events\" to tell appearance preferences to return (get dark mode as text)'") == "false\n"
  colorscheme jokull
elseif system("gsettings get org.gnome.Terminal.Legacy.Settings theme-variant") == "'light'\n"
  colorscheme jokull
else
  colorscheme junipero
endif

" where to find tags files
set tags=./tags,tags,.git/tags

" dictionary file
set dictionary=/usr/share/dict/words

" thesaurus file
set thesaurus=~/.vim/thesaurus.txt
" matchit.vim is default, why not enable it
runtime macros/matchit.vim

" same with :Man
runtime ftplugin/man.vim

" For editing binaries
set binary

" No swp please, I save all the time
set noswapfile

" make regexes consistent with other programs (extended)
set magic

" directories to search on find, gf, etc.
set path=.,**,/usr/include,/usr/local/include,,
set wildignore=**/__pycache__/**,**/venv/**,**/node_modules/**,**/dist/**,**/build/**,*.o,*.pyc,*.swp
" set wildignore=**/.git/**,**/__pycache__/**,**/venv/**,**/node_modules/**,**/dist/**,**/build/**,*.o,*.pyc,*.swp
set wildignorecase

" Persistent undos (useful for plugins too){{{
if has('persistent_undo')
  let myUndoDir = expand('$HOME/.vim' . '/undo')
  silent! call mkdir(myUndoDir, 'p')
  let &undodir = myUndoDir
  set undofile
endif
" }}}

" Hide buffers instead of closing
set hidden

" Dont redraw while executing macros
set lazyredraw

" Encoding & formats
set encoding=utf-8 nobomb
set fileformats=unix,dos,mac

" Number of lines to use for command line
" (this fixes the 'press enter to continue' thing on :help)
set cmdheight=1

" netrw {{{
let g:netrw_banner = 0                 " hide the banner
let g:netrw_fastbrowse = 2             " only get dir list if not seen, or manually refreshed
let g:netrw_liststyle = 3              " tree view
let g:netrw_winsize = 25               " open at 25% size
let g:netrw_keepdir = 0                " keep the current directory the same as the browsing directory.
let g:netrw_retmap = 1                 " double-click to return to browsing
let g:netrw_list_hide = &wildignore    " hide everything in &wildignore
let g:netrw_special_syntax = 1         " use special syntax groups for certain files in browser
" }}}

" Send more characters at a given time
set ttyfast

" Show partial command on last line
set showcmd

" Command completion
set wildmenu

" Allow the mouse, good for e.g. resizing splits
set mouse=a

highlight ColorColumn ctermbg=233

" How to split new windows
set splitbelow splitright

" Allow per-file settings
set modeline
set modelines=5     "within the first/last 5 lines

" Allow italics
set t_ZH=[3m
set t_ZR=[23m

" Since belloff isn't always an option
if exists("&belloff")
  set belloff=showmatch,esc,shell,wildmode,backspace   " Disable beeping if no match is found
endif

" Command-line autocompletion
set wildmode=longest:list,full

" Add everything to sessions
set sessionoptions=buffers,curdir,folds,globals,localoptions,options,resize,tabpages
" }}}
" Editor {{{
" In general, don't want anything concealed
if has('conceallevel')
  set conceallevel=0
endif
"
" Change cursor shape between insert and normal mode in iTerm2.app
if $TERM_PROGRAM =~ "iTerm"
    let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
    let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif

" Highlight current line
set cursorline

" Text wrap sucks most of the time
set nowrap

" Linebreak when obsessive
set linebreak
set textwidth=150

" Reduce waiting on keys (like esc)
set timeoutlen=1000 ttimeoutlen=0

" Continue wrapped line on same indent as previous
if has('breakindent')
  set breakindent
  set breakindentopt+=shift:3
endif

" Numbered lines
set number
set numberwidth=3
set relativenumber

" with a smart tab
set smarttab

" and 1 tab == 2 spaces
set tabstop=4       " visual length of \t in spaces
set expandtab       " use spaces instead of tabs
set shiftwidth=2    " 2 spaces when >>
set softtabstop=2   " and when pressing TAB
set shiftround      " always shift by multiple of shiftwidth

" Auto indent when starting new line
set autoindent
set copyindent      " copy structure of other indents whn autoindenting

" Enable indenting based on filetype
filetype plugin indent on

" Syntax highlighting
syntax on

" Enable fenced code highlighting in markdown (tpope's plugin, ships with vim)
let g:markdown_fenced_languages = ['html', 'python', 'ruby', 'bash=sh', 'map']

" Folding on indentation
set foldmethod=indent
set foldlevelstart=5      " start with up to 5 levels open
set foldnestmax=10        " unless callback-hell JS

" Show matching brackets
set showmatch
set matchtime=2

" Searching
set hlsearch    " highlight matches
set incsearch   " search while typing
set ignorecase  " ignore case generally
set smartcase   " but not if searching for capital

" Backspace tweaks
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" Complete from current buffer, other windows, buffers, unloaded buffers, tags,
"   current and included files, and dictionary if spell is set
set complete=.,w,b,u,t,i,kspell
" Use popup menu, also when there is only one match, don't insert until the user selects
"   a match, don't select anything automatically.
set completeopt=menu,menuone,preview

nmap <leader># <Plug>ToggleNumber

set omnifunc=syntaxcomplete#Complete

" Keep cursor off top and bottom of screen
set scrolloff=5

" Which formats to use for incrementing/decrementing
set nrformats=hex,bin
" }}}
" Commands {{{
command! TodoP vimgrep /^ *[#%\/E]* *\(TODO\|TO DO\)/ **/*.* | copen
command! Todo vimgrep /^ *[#%\/E]* *\(TODO\|TO DO\)/ % | copen
command! NoteP vimgrep /NOTE\C/ **/*.* | copen
command! Note vimgrep /NOTE\C/ % | copen
command! FixP vimgrep /FIXME\C/ **/*.* | copen
command! Fix vimgrep /FIXME\C/ % | copen
command! ListFileTypes echo glob($VIMRUNTIME . '/syntax/*.vim')
command! CDC cd %:p:h
command! LCDC lcd %:p:h
command! Maketab set noet ts=2 | %retab!
command! Diff w !diff % -
command! Diffg w !git diff % -
command! Fuckwindows %s///g
command! Hexedit %!xxd
command! Unhex %!xxd -r
command! JsonSimplifyObject %s/^\(\s\{10}\){\n\s\{12\}\(.*\)\n\s\{10\}}\(,\?\)/\1{ \2 }\3
command! BeautifyJson %!python -m json.tool
command! Dos2unix .!dos2unix "%"
command! -nargs=1 Cheat terminal curl cheat.sh/<args>

" Fat finger fixes/convenience abbreviations
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Qall qall
cnoreabbrev E Explore
cnoreabbrev Colors XtermColorTable
cnoreabbrev lset setl
cnoreabbrev sudow w !sudo tee > /dev/null %
cnoreabbrev hg helpgrep

if has('terminal')
  cnoreabbrev tt tab terminal
  " ++close means close when process ends
  "   (so that I don't get a hanging term buffer)
  cnoreabbrev wt terminal ++close
  cnoreabbrev tm terminal ++close man
  cnoreabbrev tf terminal ++close lf
  cnoreabbrev tn terminal ++close joplin
  command! Tuir tab terminal tuir
endif
" }}}
" Symbols {{{
execute "digraphs ks " . 0x2096
execute "digraphs as " . 0x2090
execute "digraphs es " . 0x2091
execute "digraphs hs " . 0x2095
execute "digraphs is " . 0x1D62
execute "digraphs ks " . 0x2096
execute "digraphs ls " . 0x2097
execute "digraphs ms " . 0x2098
execute "digraphs os " . 0x2092
execute "digraphs ps " . 0x209A
execute "digraphs rs " . 0x1D63
execute "digraphs ss " . 0x209B
execute "digraphs ts " . 0x209C
execute "digraphs us " . 0x1D64
execute "digraphs vs " . 0x1D65
execute "digraphs xs " . 0x2093
execute "digraphs \\|- " . 0x22A2
execute "digraphs \\|=" . 0x22A8
execute "digraphs \\|!" . 0x22AD
execute "digraphs nS " . 0x207F
execute "digraphs ns " . 8345

execute "digraphs A& " . 0x1D4D0
execute "digraphs B& " . 0x1D4D1
execute "digraphs C& " . 0x1D4D2
execute "digraphs D& " . 0x1D4D3
execute "digraphs E& " . 0x1D4D4
execute "digraphs F& " . 0x1D4D5
execute "digraphs G& " . 0x1D4D6
execute "digraphs H& " . 0x1D4D7
execute "digraphs I& " . 0x1D4D8
execute "digraphs J& " . 0x1D4D9
execute "digraphs K& " . 0x1D4DA
execute "digraphs L& " . 0x1D4DB
execute "digraphs M& " . 0x1D4DC
execute "digraphs N& " . 0x1D4DD
execute "digraphs O& " . 0x1D4DE
execute "digraphs P& " . 0x1D4DF
execute "digraphs Q& " . 0x1D4E0
execute "digraphs R& " . 0x1D4E1
execute "digraphs S& " . 0x1D4E2
execute "digraphs T& " . 0x1D4E3
execute "digraphs U& " . 0x1D4E4
execute "digraphs V& " . 0x1D4E5
execute "digraphs W& " . 0x1D4E6
execute "digraphs X& " . 0x1D4E7
execute "digraphs Y& " . 0x1D4E8
execute "digraphs Z& " . 0x1D4E9
execute "digraphs a& " . 0x1D4EA
execute "digraphs b& " . 0x1D4EB
execute "digraphs c& " . 0x1D4EC
execute "digraphs d& " . 0x1D4ED
execute "digraphs e& " . 0x1D4EE
execute "digraphs f& " . 0x1D4EF
execute "digraphs g& " . 0x1D4F0
execute "digraphs h& " . 0x1D4F1
execute "digraphs i& " . 0x1D4F2
execute "digraphs j& " . 0x1D4F3
execute "digraphs k& " . 0x1D4F4
execute "digraphs l& " . 0x1D4F5
execute "digraphs m& " . 0x1D4F6
execute "digraphs n& " . 0x1D4F7
execute "digraphs o& " . 0x1D4F8
execute "digraphs p& " . 0x1D4F9
execute "digraphs q& " . 0x1D4FA
execute "digraphs r& " . 0x1D4FB
execute "digraphs s& " . 0x1D4FC
execute "digraphs t& " . 0x1D4FD
execute "digraphs u& " . 0x1D4FE
execute "digraphs v& " . 0x1D4FF
execute "digraphs w& " . 0x1D500
execute "digraphs x& " . 0x1D501
execute "digraphs y& " . 0x1D502
execute "digraphs z& " . 0x1D503
" }}}
" Mappings {{{
" So I don't have to mash shift all the time
nnoremap ; :
vnoremap ; :

if has('terminal')
  tnoremap <C-w>; <C-w>:
endif

" To keep the old functionality of ;
nnoremap : ;

" Disable q: cuz I hate it
" (also C-F does the same)
nnoremap q: <Nop>

" Normal mode shortcuts
nnoremap <leader>dif :Diff<CR>
nnoremap <leader>b :ls<CR>:b<Space>

" Tab completion (disabled because of ultisnips)
" inoremap <expr> <tab> InsertTabWrapper()
" inoremap <s-tab> <c-p>

" Retain visual mode after > and <
vnoremap < <gv
vnoremap > >gv

" visual j/k
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" Move visual block
xnoremap D :m '>+1<CR>gv=gv
xnoremap U :m '<-2<CR>gv=gv

" and don't break my colours (U for 'unfuck my screen please')
nnoremap U :syntax sync fromstart<CR>:redraw!<CR>

" 'zoom to head level'
nnoremap zh mzzt10<c-u>`z

" Reindent the file
nnoremap <leader>= mlgg=G`lzz

" Tab mappings
nnoremap <C-t> :tabnew<CR>
nnoremap <C-c> :tabclose<CR>

" Window resizing mappings
nnoremap <C-k> <C-w>+
nnoremap <C-j> <C-w>-
nnoremap <C-h> <C-W>>
nnoremap <C-l> <C-W><

" Delete hidden buffers
nmap <leader>dh <Plug>DeleteHiddenBuffers

" Switch to alernative buffer
nnoremap <leader>s<leader> :b#<CR>

" Show hidden symbols
nnoremap <leader>hs :set list!<CR>

" List marks
nnoremap <leader>mm :<C-u>marks<CR>:normal! `
nnoremap <leader>ml :<C-u>marks a-z<CR>:normal! `


" Map '0' to act as '^' on first press and '0' on second
nnoremap <expr> <silent> 0 col('.') == match(getline('.'),'\S')+1 ? '0' : '^'

" Highlight last inserted text
nnoremap gV `[v`]

" Save in insert mode
inoremap <C-Z> <C-o>:w<CR>

" Set the foldlevel
nnoremap zn :set foldlevel=
nnoremap zs :exe "set foldlevel=".foldlevel(line('.'))<CR>

" Config edit mappings
" Why :drop? It uses the file if it's already open.
nnoremap <C-E><C-V> :DropToFoldedVimrc<CR>zXgg
nnoremap <C-E><C-A> :DropToFoldedVimrc<CR>zXgg/^" Autocommands {{<CR>:noh<CR>za
nnoremap <C-E><C-C> :DropToFoldedVimrc<CR>zXgg/Commands {{<CR>:noh<CR>za
nnoremap <C-E><C-E> :DropToFoldedVimrc<CR>zXgg/Editor {{<CR>:noh<CR>za
nnoremap <C-E><C-G> :DropToFoldedVimrc<CR>zXgg/General {{<CR>:noh<CR>za
nnoremap <C-E><C-M> :DropToFoldedVimrc<CR>zXgg/Mappings {{<CR>:noh<CR>za
nnoremap <C-E><C-P><C-I> :DropToFoldedVimrc<CR>zXgg/Plugins {{<CR>:noh<CR>za/Installation {{<CR>:noh<CR>za
nnoremap <C-E><C-P><C-C> :DropToFoldedVimrc<CR>zXgg/Plugins {{<CR>:noh<CR>za/Config {{<CR>:noh<CR>za
nmap <C-E><C-L> <Plug>VimcolorEdit

" Yank to clipboard
nnoremap <leader>d "+d
vnoremap <leader>d "+d
nnoremap <leader>D "+D
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>p "+p
nnoremap <leader>P "+P
nnoremap <leader>n "_
vnoremap <leader>n "_
nnoremap <leader>yy "+yg_
nnoremap Y y$

" Insert lines without moving cursor and going into insert mode
nnoremap <leader>o m`o<esc>``
nnoremap <leader>O m`O<esc>``

" This should be a plugin but for now...
" time (hh:mm-hh:mm) to duration in hours
nnoremap <leader>td 0f-l"aywf:l"byw0"cywf:l"dywA (=((a*60+b)-(c*60+d))/60.0)F.r:wyw"aywcw=0.a*60F.2xih0:s/:0h/h

" Custom session maps
nnoremap <leader>ss :call sessions#SaveSession()<CR>
nnoremap <leader>sl :call sessions#LoadSession()<CR>
nnoremap <leader>sd :call sessions#DeleteSession()<CR>
nnoremap <leader>sq :call sessions#CloseSession()<CR>

" native file browsing
nnoremap <leader>f  :Lexplore<CR>

" Strip trailing whitespace (silent makes it so nothing is echoed)
nmap <silent> <leader>$ <Plug>StripTrailingWhitespace

" Run selected commands (again, silent)
vmap <silent> <leader><CR> <Plug>VisualRunCommands

" Buffer switching
nnoremap H :bprevious<CR>
nnoremap L :bnext<CR>

" Arg switching
nnoremap <leader>H :previous<CR>
nnoremap <leader>L :next<CR>

" List color group
nmap <C-P> <Plug>VimcolorSynstack

" Correct the last spelling error
inoremap <expr> <C-x>s &spell ? "<c-g>u<Esc>[s1z=`]a<c-g>u" : ""

" Make-ing (use Dispatch if enabled)
nnoremap <leader>m? :set makeprg<CR>
nnoremap <expr> <leader>mm g:loaded_dispatch ? ":Make<CR>" : ":silent make<CR>\|:redraw!<CR>\|:cwindow<CR>"
nnoremap <expr> <leader>mc g:loaded_dispatch ? ":Make clean<CR>" : ":silent make clean<CR>\|:redraw!<CR>"
" }}}
" Autocommands {{{
if has('autocmd')
  augroup sets
    autocmd!
    autocmd InsertEnter * setlocal nocursorline
    autocmd InsertLeave * setlocal cursorline
  augroup END
endif
" }}}
