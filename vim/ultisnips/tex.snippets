# vim: foldmethod=marker foldlevel=0 expandtab softtabstop=2 shiftwidth=2:
# Define math context {{{
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal
# }}}

# Skeletons {{{
snippet skel "Math skeleton" b
\documentclass[12pt,a4paper,oneside,fleqn]{article}
\usepackage{amsmath}
\usepackage{amssymb}
\begin{document}
  $1
\end{document}
endsnippet

snippet front "Front matter" b
\title{$1}
\author{$2}
endsnippet
# }}}

# Environments {{{
snippet ul "unordered list" b
\begin{itemize}
  \item $1
  $2
\end{itemize}
endsnippet

snippet - "item in list" b
\item $1
  $2
endsnippet

snippet beg "begin{} / end{}" bA
\begin{$1}
  $0
\end{$1}
endsnippet

snippet sec "section{}" b
\section{$1}
$0
endsnippet

snippet mk "Inline math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Displayed math" wA
\[
$1
.\] $0
endsnippet
# }}}

# Word processing {{{
snippet i "italic text" w
\textit{$1}
endsnippet

snippet b "bold text" w
\textbf{$1}
endsnippet
# }}}

# Math symbols {{{
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
priority 10
snippet "bar" "bar" ri
\overline{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])-bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "hat" "hat" ri
\hat{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])-hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet _{ "underbrace"
\underbrace{${1:expression}}_\text{${2:annotation}}
endsnippet

context "math()"
snippet ^{ "overbrace"
\overbrace{${1:expression}}^\text{${2:annotation}}
endsnippet
# }}}

# Custom commands {{{
snippet cmd "\given{A}{B} - (A|B)" b
% \given{A}{B} ("A given B") %
\makeatletter
\newcommand{\@givenstar}[2]{\left(#1\;\middle|\;#2\right)}
\newcommand{\@givennostar}[3][]{#1(#2\;#1|\;#3#1)}
\newcommand{\given}{\@ifstar\@givenstar\@givennostar}
\makeatother
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
endsnippet

snippet cmd "another one" b
this doesn't actually do anything
endsnippet
# }}}
