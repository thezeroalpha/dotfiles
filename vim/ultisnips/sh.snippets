snippet case "Case statement" b
case "$${1:variable}" in
  "${2:Option 1}")
    ;;
  *)
    ;;
esac
endsnippet

snippet argparse "Parse arguments/flags" b
PARAMS=""

while [ \$((\$#)) -ne 0 ]; do
  case "\$1" in
    -${1:letter}|--${2:long name})
      $2="\$2"
      shift 2
      ;;
    $0
    -h|--help)
      echo "Usage:"
      echo "${3:usage text}"
      exit 0
      ;;
    --) # end arg parsing
      shift
      break
      ;;
    -*) # unsupported flags
      echo "Unsupported flag \$1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="\$PARAMS $(printf '%q' "\$1")"
      shift
      ;;
  esac
done
eval set -- "\$PARAMS"
endsnippet

snippet !bash "Bash shebang" b
#!/usr/bin/env bash
$0
endsnippet

snippet !sh "Sh shebang" b
#!/bin/sh
$0
endsnippet

snippet checkdeps "Check script dependencies" b
checkdeps() {
  for com in "$@"; do
    command -v "$com" >/dev/null 2>&1 \
      || { printf '%s not found.\n' "$com" >&2 && exit 1; }
  done
}
checkdeps "${1:command name}"
$0
endsnippet

snippet die "Die function" b
die() { printf '%s\n' "\$1" >&2 && exit 1; }
$0
endsnippet

snippet func "Function definition" b
${1:function_name}() {
  $0
}
endsnippet

snippet trap "Exit trap" b
trap ${1:cleanup_function} INT TERM EXIT
endsnippet

snippet untrap "Disable exit trap" b
trap - INT TERM EXIT
endsnippet

snippet for "POSIX for loop" b
: \$((${1:var}=0))
while [ \$(($1 ${2:test})) -ne 0 ]; do
  ${3:# code}

  i=\$(($1+1))
done
$0
endsnippet

snippet confirm "Ask for confirmation" b
printf "${1:prompt}"
read -r conf; case "$conf" in
  Y|y)
    ${2:# code if yes}
    ;;
  *)
    ${3:# code otherwise}
    ;;
esac
$0
endsnippet

snippet osdetect "Detect OS" b
os=\$(uname -s | tr '[:upper:]' '[:lower:]')
case "\$os" in
  linux*)
    ${1:# code for Linux}
    ;;
  darwin*)
    ${2:# code for macOS}
    ;;
  msys*|cygwin*|mingw*|nt|win*)
    ${3:# code for Windows}
    ;;
  *)
    printf "Operating system %s is unknown.\n" "\$os"
    ;;
esac
endsnippet

snippet contains "String contains substring" w
[ -z "\${${1:strvar}##*${2:substr}*}" ]$0
endsnippet

snippet herevar "Store heredoc in a variable" b
# EOF quoted means no var expansion, dash means ignore indentation
unset ${1:heredoc}
while IFS="$(printf "\n")" read -r line; do
  $1="$(printf "%s%s" "\$$1" "$line\n")"
done <<-'EOF'
${2:heredoc contents}
EOF
endsnippet

snippet herefile "Store heredoc in a file" b
# EOF quoted means no var expansion, dash means ignore indentation
cat <<-'EOF' > "${1:filename}"
${2:heredoc contents}
EOF
endsnippet

snippet readinput "Get input from arguments or stdin" b
if ! [ -t 0 ]; then
  while read -r line; do
    ${1:# handle stdin}
  done
elif [ $# -gt 0 ]; then
  ${2:#handle arguments}
fi
endsnippet
