* Bootstrap
** Auto-compile this config file
   #+begin_src emacs-lisp
     (defun tangle-init ()
       "If the current buffer is 'init.org' the code-blocks are
     tangled, and the tangled file is compiled."
       (when (equal (buffer-file-name)
		    (expand-file-name (concat user-emacs-directory "initconfig.org")))
	 ;; Avoid running hooks when tangling.
	 (let ((prog-mode-hook nil))
	   (org-babel-tangle)
	   (byte-compile-file (concat user-emacs-directory "config.el")))))

     (add-hook 'after-save-hook 'tangle-init)   
   #+end_src

** Garbage collection
   Garbage-collect on focus-out, Emacs /should/ feel snappier.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'focus-out-hook #'garbage-collect)
   #+END_SRC

* Theming
  Load the themes (from Doom emacs).

  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'doom-themes)
      (package-refresh-contents)
      (package-install 'doom-themes))

    (use-package doom-themes
      :config
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	    doom-themes-enable-italic t) ; if nil, italics is universally disabled

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Enable custom neotree theme (all-the-icons must be installed!)
      (doom-themes-neotree-config)
      ;; or for treemacs users
      (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
      (doom-themes-treemacs-config)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))
  #+END_SRC

  Choose a theme depending on the system theme:

  #+begin_src emacs-lisp
    (if (file-exists-p "~/.config/dark-theme")
	(load-theme 'doom-one t)
      (load-theme 'doom-one-light t))
  #+end_src

* Packages
** emacs-which-key
   Minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'which-key)
       (package-refresh-contents)
       (package-install 'which-key))
     (which-key-mode)
   #+END_SRC
** helm
   Install if not installed:

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'helm)
       (package-refresh-contents)
       (package-install 'helm))
   #+END_SRC

   Configure:

   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :defer nil
       :custom
       (helm-M-x-always-save-history t)
       (helm-display-function 'pop-to-buffer)
       (savehist-additional-variables '(extended-command-history))
       (history-delete-duplicates t)
       :custom-face
       (helm-non-file-buffer ((t (:inherit font-lock-comment-face))))
       (helm-ff-file-extension ((t (:inherit default))))
       (helm-buffer-file ((t (:inherit default))))
       :bind
       (("M-x" . helm-M-x)
	("C-x C-f" . helm-find-files)
	("C-x C-b" . helm-buffers-list)
	("C-x b" . helm-buffers-list)
	("C-x C-r" . helm-recentf)
	("C-x C-i" . helm-imenu)
	("M-y" . helm-show-kill-ring))
       :config
       (helm-mode)
       (savehist-mode))
   #+END_SRC
   
   I'd also like helm in a popup frame so:
** org
   In org mode, I want to use bullets instead of stars.
   Also, I add a few expansions 
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :config
       (unless (package-installed-p 'org-bullets)
	 (package-refresh-contents)
	 (package-install 'org-bullets))
       (require 'org-bullets)
       (require 'org-tempo)

       :hook
       (org-mode . (lambda () (org-bullets-mode 1))))
   #+END_SRC
** exec-path-from-shell
   In macOS, the path is not set correctly in the GUI app. This fixes it.
   #+begin_src emacs-lisp
     (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize))
   #+end_src
** lean-mode
   Shift completion for lean-mode and company-lean:

   #+begin_src emacs-lisp
     (global-set-key (kbd "S-SPC") #'company-complete)
   #+end_src
* Defaults
** Appearance
   Highlight the current line

   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode)
     (show-paren-mode 1)
   #+END_SRC

   Disable some UI elements:

   #+BEGIN_SRC emacs-lisp
     (when window-system
     (scroll-bar-mode 0) ; Disable scrollbar
     (tool-bar-mode 0)); Disable toolbar
   #+END_SRC
   
   Line numbers

   #+begin_src emacs-lisp
     (global-linum-mode 1)
   #+end_src

** Backup files
   By default, backup files (those with a tilde) are saved in the same directory as the currently edited file.
   This setting puts them in ~/.local/share/emacs/saves.

   #+begin_src emacs-lisp
     (setq backup-directory-alist '(("." . "~/.local/share/emacs/saves")))
     (setq backup-by-copying t)
   #+end_src
