;; Have to put this to fix a known bug
;; https://www.reddit.com/r/emacs/comments/cdei4p/failed_to_download_gnu_archive_bad_request/
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(package-initialize)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

;; Set the shell
(setq-default explicit-shell-file-name "/bin/bash")

;; Set themes
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'cyberpunk t)

;; Let me press 'y'/'n' to answer yes-or-no questions
(fset 'yes-or-no-p 'y-or-n-p)

;; Show matching parens
(show-paren-mode 1)

;; Fuzzy file matching
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

(delete-selection-mode 1)

(when (require 'org)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (setq org-agenda-files (quote ("~/.emacs.d/todo.org")))
  (define-key global-map (kbd "C-c c") 'org-capture)
  (when (require 'org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    )
  )
(when (require 'undo-tree)
  (global-undo-tree-mode)
  )
(when (require 'expand-region)
  (global-set-key (kbd "C-=") 'er/expand-region)
  )
(when (require 'helm)
  ;; change default prefix key
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

  ;; helm-M-x
  (setq helm-M-x-fuzzy-match t)
  (global-set-key (kbd "M-x") 'helm-M-x)

  ;; helm-kill-ring
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)

  ;; helm-mini
  (global-set-key (kbd "C-x b") 'helm-mini)
  (setq helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match t)

  ;; helm-apropos
  (global-set-key (kbd "C-h a") 'helm-apropos)

  ;; helm-find-files
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  )

;; Haskell stuff
(add-hook 'haskell-mode-hook 'haskell-indentation-mode)
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)

(setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))

(defun kill-other-buffers ()
      "Kill all other buffers."
      (interactive)
      (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

;; Custom commands
(defun light ()
  "Switch to light mode."
  (interactive)
  (load-theme 'spacemacs-light)
  )

(defun dark ()
  "Switch to dark mode."
  (interactive)
  (load-theme 'cyberpunk)
  )

(add-hook 'artist-mode-hook (lambda () (setq indent-tabs-mode nil)))
(with-eval-after-load 'ox
  (require 'ox-pandoc))

(setq org-pandoc-menu-entry (quote (
                                        ;; ----------------------------------------------------------------------
                                        ;; Docs
                                        ;; ----------------------------------------------------------------------
                                        (?m "to markdown and open." org-pandoc-export-to-markdown-and-open)
                                        (?M "as markdown." org-pandoc-export-as-markdown)
                                        (?k "to markdown_mmd." org-pandoc-export-to-markdown_mmd)
                                        (?K "to markdown_mmd and open." org-pandoc-export-to-markdown_mmd-and-open)
                                        (?p "to plain and open." org-pandoc-export-to-plain-and-open)
                                        (?P "as plain." org-pandoc-export-as-plain)
                                        (?a "to asciidoc and open." org-pandoc-export-to-asciidoc-and-open)
                                        (?A "as asciidoc." org-pandoc-export-as-asciidoc)
                                        (?n "to man and open." org-pandoc-export-to-man-and-open)
                                        (?N "as man." org-pandoc-export-as-man)
                                        ;; ----------------------------------------------------------------------
                                        ;; WIKIs
                                        ;; ----------------------------------------------------------------------
                                        (?u "to dokuwiki and open." org-pandoc-export-to-dokuwiki-and-open)
                                        (?U "as dokuwiki." org-pandoc-export-as-dokuwiki)
                                        (?w "to mediawiki and open." org-pandoc-export-to-mediawiki-and-open)
                                        (?W "as mediawiki." org-pandoc-export-as-mediawiki)
                                        ;; ----------------------------------------------------------------------
                                        ;; Slides
                                        ;; ----------------------------------------------------------------------
                                        (?r "to revealjs and open." org-pandoc-export-to-revealjs-and-open)
                                        (?R "as revealjs." org-pandoc-export-as-revealjs)
                                        (?s "to slidy and open." org-pandoc-export-to-slidy-and-open)
                                        (?S "as slidy." org-pandoc-export-as-slidy)
                                        (?z "to dzslides and open." org-pandoc-export-to-dzslides-and-open)
                                        (?Z "as dzslides." org-pandoc-export-as-dzslides)
                                        ;; ----------------------------------------------------------------------
                                        ;; DOC
                                        ;; ----------------------------------------------------------------------
                                        (?o "to odt and open." org-pandoc-export-to-odt-and-open)
                                        (?O "to odt." org-pandoc-export-to-odt)
                                        (?x "to docx and open." org-pandoc-export-to-docx-and-open)
                                        (?X "to docx." org-pandoc-export-to-docx)
                                        ;; ----------------------------------------------------------------------
                                        ;; HTML
                                        ;; ----------------------------------------------------------------------
                                        (?h "to html5 and open." org-pandoc-export-to-html5-and-open)
                                        (?H "as html5." org-pandoc-export-as-html5)
                                        (?5 "to html5-pdf and open." org-pandoc-export-to-html5-pdf-and-open)
                                        (?% "to html5-pdf." org-pandoc-export-to-html5-pdf)
                                        ;; ----------------------------------------------------------------------
                                        ;; PDF
                                        ;; ----------------------------------------------------------------------
                                        (?l "to latex-pdf and open." org-pandoc-export-to-latex-pdf-and-open)
                                        (?L "to latex-pdf." org-pandoc-export-to-latex-pdf)
                                        (?= "to ms-pdf and open." org-pandoc-export-to-ms-pdf-and-open)
                                        (?- "to ms-pdf." org-pandoc-export-to-ms-pdf)
                                        (?b "to beamer-pdf and open." org-pandoc-export-to-beamer-pdf-and-open)
                                        (?B "to beamer-pdf." org-pandoc-export-to-beamer-pdf)
                                        (?c "to context-pdf and open." org-pandoc-export-to-context-pdf-and-open)
                                        (?C "to context-pdf." org-pandoc-export-to-context-pdf)
                                        ;; ----------------------------------------------------------------------
                                        ;; E-books
                                        ;; ----------------------------------------------------------------------
                                        (?e "to epub3 and open." org-pandoc-export-to-epub3-and-open)
                                        (?E "to epub3." org-pandoc-export-to-epub3)
                                        ;; ----------------------------------------------------------------------
                                        ;; Dev
                                        ;; ----------------------------------------------------------------------
                                        (?j "to json and open." org-pandoc-export-to-json-and-open)
                                        (?J "as json." org-pandoc-export-as-json))))

(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("melpa" . "http://melpa.milkbox.net/packages/")))


;; Add package repositories
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl
    (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))


(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-cursor-mode t)
 '(blink-matching-paren t)
 '(custom-enabled-themes (quote (cyberpunk spacemacs-light)))
 '(custom-safe-themes
   (quote
    ("7238a72b7ad187001482aa5d803a83df542b9f90aa544b48fdd939672c483680" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "3fd57a3dc99eb0e2ec438555cf801572f649c79513d3a8da7980ab54cf66121b" "eb5c69951164b0768bc281a5dfca5fc02b02f65e1ca92c0636ae5e773e9d7704" "fa2b58bb98b62c3b8cf3b6f02f058ef7827a8e497125de0254f56e373abee088" default)))
 '(hl-todo-keyword-faces
   (quote
    (("TODO" . "#dc752f")
     ("NEXT" . "#dc752f")
     ("THEM" . "#2d9574")
     ("PROG" . "#3a81c3")
     ("OKAY" . "#3a81c3")
     ("DONT" . "#f2241f")
     ("FAIL" . "#f2241f")
     ("DONE" . "#42ae2c")
     ("NOTE" . "#b1951d")
     ("KLUDGE" . "#b1951d")
     ("HACK" . "#b1951d")
     ("TEMP" . "#b1951d")
     ("FIXME" . "#dc752f")
     ("XXX+" . "#dc752f")
     ("\\?\\?\\?+" . "#dc752f"))))
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(menu-bar-mode nil)
 '(org-babel-load-languages
   (quote
    ((awk . t)
     (shell . t)
     (emacs-lisp . t)
     (haskell . t)
     (python . t)
     (ruby . t))))
 '(org-confirm-babel-evaluate nil)
 '(org-entities-user
   (quote
    (("sqcup" "\\sqcup" nil "" "" "" "⊔")
     ("sqcap" "\\sqcap" nil "" "" "" "⊓"))))
 '(org-export-backends (quote (ascii html icalendar latex md odt)))
 '(org-export-with-author nil)
 '(org-export-with-title nil)
 '(org-pandoc-options-for-markdown (quote ((katex . t) (atx-headers . t))))
 '(org-pretty-entities t)
 '(package-check-signature nil)
 '(package-selected-packages
   (quote
    (ox-pandoc chess htmlize expand-region org-bullets undo-tree helm exec-path-from-shell haskell-mode 2048-game spacemacs-theme magit plan9-theme sml-mode rainbow-mode)))
 '(pdf-view-midnight-colors (quote ("#655370" . "#fbf8ef")))
 '(tool-bar-mode nil)
 '(tooltip-mode nil)
 '(version-control t)
 '(word-wrap nil)
 '(xterm-mouse-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-code ((t (:foreground "#21b8c7" :height 1.2 :family "Courier"))))
 '(tty-menu-disabled-face ((t (:background "color-238" :foreground "color-16"))))
 '(tty-menu-enabled-face ((t (:background "red" :foreground "white" :weight bold))))
 '(tty-menu-selected-face ((t (:background "magenta" :foreground "white")))))

