* Theme
  I want this to load first because otherwise it'll blind me during the night while it's trying to refresh packages.

  Icons required for some parts of the doom theme:

  #+begin_src emacs-lisp
    (use-package all-the-icons)
  #+end_src

  Load Doom Emacs themes:

  #+begin_src emacs-lisp
    (use-package doom-themes
      :config
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	    doom-themes-enable-italic t) ; if nil, italics is universally disabled

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Enable custom neotree theme (all-the-icons must be installed!)
      (doom-themes-neotree-config)
      ;; or for treemacs users
      (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
      (doom-themes-treemacs-config)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))
  #+end_src

  Define the themes I want:

  #+begin_src emacs-lisp
    (setq dark-theme 'doom-one)
    (setq light-theme 'doom-acario-light)
  #+end_src

  Change theme depending on the current system theme.
  The way I check for dark mode is defined in 'dark-mode-p'; currently I use the presence of the ~/.config/dark-theme file to indicate when dark theme is set.
  A function ending in '-p' is a predicate, i.e. returns true or false.
  If calling a function that's in a variable, you have to use 'funcall'.

  #+begin_src emacs-lisp
    (let ((dark-mode-p (lambda () (file-exists-p "~/.config/dark-theme"))))
      (if (funcall dark-mode-p)
	  (load-theme dark-theme t)
	(load-theme light-theme t)))
  #+end_src

* Garbage collection
  Garbage-collect on focus-out, Emacs /should/ feel snappier.

  #+begin_src emacs-lisp
  (add-hook 'focus-out-hook #'garbage-collect)
  #+end_src

* Package management
** Repositories (MELPA & Org)
   #+begin_src emacs-lisp
     (require 'package)
     (add-to-list 'package-archives
		  '("melpa" . "https://melpa.org/packages/"))
     (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
     (package-refresh-contents)
     (package-initialize)
   #+end_src

** use-package
   Install and load use-package.
   Use-package tidies up package configuration and reduces the verboseness of configuration.

   #+begin_src emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))
     (eval-when-compile (require 'use-package))
   #+end_src

   Always auto-install packages:

   #+begin_src emacs-lisp
     (require 'use-package-ensure)
     (setq use-package-always-ensure t)
   #+end_src

* Packages
** exec-path-from-shell (macOS)

   In macOS, the path is not set correctly in the GUI app. This fixes it.
   #+begin_src emacs-lisp
     (when (memq window-system '(mac ns x))
       (use-package exec-path-from-shell
	 :config
	 (exec-path-from-shell-initialize)))
   #+end_src

** emacs-which-key
   Minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config
       (which-key-mode))
   #+end_src

** helm
   Better incremental completion and selection narrowing.
   And a bunch more.
   Generally makes for nicer interactivity, like ido mode on steroids.

   #+begin_src emacs-lisp
     (use-package helm
       :defer nil
       :custom
       (helm-M-x-always-save-history t)
       (helm-display-function 'pop-to-buffer)
       (savehist-additional-variables '(extended-command-history))
       (history-delete-duplicates t)
       :custom-face
       (helm-non-file-buffer ((t (:inherit font-lock-comment-face))))
       (helm-ff-file-extension ((t (:inherit default))))
       (helm-buffer-file ((t (:inherit default))))
       :bind
       (("M-x" . helm-M-x)
	("C-x C-f" . helm-find-files)
	("C-x C-b" . helm-buffers-list)
	("C-x b" . helm-buffers-list)
	("C-x C-r" . helm-recentf)
	("C-x C-i" . helm-imenu)
	("M-y" . helm-show-kill-ring))
       :config
       (helm-mode)
       (savehist-mode))
   #+end_src

** org
   In org mode, I want to use bullets instead of stars.
   Also, I add a few expansions

   #+begin_src emacs-lisp
     (use-package org
       :config
       (unless (package-installed-p 'org-bullets)
	 (package-refresh-contents)
	 (package-install 'org-bullets))
       (require 'org-bullets)
       (require 'org-tempo)

       :hook
       (org-mode . (lambda () (org-bullets-mode 1))))
   #+end_src

** lean-mode
   Specifically for the Lean prover.
   I also install company-lean and helm-lean, which are suggested on the [[https://github.com/leanprover/lean-mode][Github page]].
   Then I map company-complete only for lean-mode.

   #+begin_src emacs-lisp
     (use-package lean-mode
       :config
       (unless (package-installed-p 'company-lean)
	 (package-refresh-contents)
	 (package-install 'company-lean))
       (require 'company-lean)
       (unless (package-installed-p 'helm-lean)
	 (package-refresh-contents)
	 (package-install 'helm-lean))
       (require 'helm-lean)

       :hook
       (lean-mode . (lambda () (define-key lean-mode-map (kbd "S-SPC") #'company-complete))))
   #+end_src

** magit
   #+begin_src emacs-lisp
     (use-package magit)
   #+end_src

** vterm
   Emacs has a bunch of built-in terminal emulators.
   And they all suck.
   (OK not really, eshell is alright, but not for interactive terminal programs like newsboat/neomutt)

   Also use emacsclient inside vterm as an editor, because that'll open documents in the existing Emacs session.
   And I'm not gonna be a heretic and open Vim inside of Emacs.

   #+begin_src emacs-lisp
     (use-package vterm
       :config
       (setq vterm-environment '("EDITOR=emacsclient")))
   #+end_src

* Interface
** GUI elements
   Get rid of all bars.

   #+begin_src emacs-lisp
     (setq org-src-tab-acts-natively t)
     (when window-system
       (menu-bar-mode -1)
       (tool-bar-mode -1)
       (scroll-bar-mode -1)
       (tooltip-mode -1))
   #+end_src

** Messages
   Hide some messages I don't need.

   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)
     (setq initial-scratch-message "")
   #+end_src

** Appearance
*** Cursor line
    Highlight the current line:

    #+begin_src emacs-lisp
      (global-hl-line-mode)
      (show-paren-mode 1)
    #+end_src
*** Line numbers
    Relative line numbers:

    #+begin_src emacs-lisp
      (setq display-line-numbers-type 'relative)
      (global-display-line-numbers-mode)
    #+end_src

    Don't display them in specific modes.  For each of the modes in
    'mode-hooks', add a function to hide line numbers when the mode
    activates (which triggers the 'mode'-hook).

    #+begin_src emacs-lisp
      (let ((mode-hooks '(doc-view-mode-hook vterm-mode-hook)))
	(mapc
	 (lambda (mode-name)
	   (add-hook mode-name (lambda () (display-line-numbers-mode 0))))
	 mode-hooks))
    #+end_src
*** Modeline
    I want to show the time in the modeline:

    #+begin_src emacs-lisp
      (display-time-mode 1)
    #+end_src

    Maybe at some point I'll customize the modeline too.
* File locations
** Auto-Save files
  By default, auto-save files ("#file#") are placed in the same directory as the file itself.
  I want to put this all in some unified place:

  #+begin_src emacs-lisp
    (setq auto-save-file-name-transforms
	  `((".*" "~/.local/share/emacs/saves/" t)))
  #+end_src

** Backup files
  By default, backup files (those with a tilde) are saved in the same directory as the currently edited file.
  This setting puts them in ~/.local/share/emacs/backups.

  #+begin_src emacs-lisp
    (setq backup-directory-alist '(("." . "~/.local/share/emacs/backups")))
    (setq backup-by-copying t)
  #+end_src

** Custom settings file
Both commands are necessary.
First one tells Emacs where to save customizations.
The second one actually loads them.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
  (load custom-file)
#+end_src

* Editor
** Strip trailing whitespace
   You can show trailing whitespace by setting show-trailing-whitespace to 't'.
   But I want to automatically strip trailing whitespace.
   Luckily there's already a function for that, I just need to call it in a hook:

   #+begin_src emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+end_src
** Auto-formatting
Disable fill mode in Markdown

#+begin_src emacs-lisp
  (add-hook 'markdown-mode-hook (lambda () (auto-fill-mode 0) (flyspell-mode 1)))
#+end_src

Never insert tabs with indentation:

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** Wrapping
   I want to wrap text at window boundary for some modes:

   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook (lambda ()
				(visual-line-mode)
				(org-indent-mode)))
     (add-hook 'markdown-mode-hook (lambda () (visual-line-mode)))
   #+end_src

** Pulse line
   Set some options for pulsing:

   #+begin_src emacs-lisp
     (setq pulse-iterations 10)
     (setq pulse-delay 0.05)
   #+end_src

   Define the pulse function:

   #+begin_src emacs-lisp
     (defun pulse-line (&rest _)
       "Pulse the current line."
       (pulse-momentary-highlight-one-line (point)))
   #+end_src

   Run it in certain cases: scrolling up/down, recentering, switching windows.
   'dolist' binds 'command' to each value in the list in turn, and runs the body.
   'advice-add' makes the pulse-line function run after 'command'.

   #+begin_src emacs-lisp
     (dolist (command '(scroll-up-command scroll-down-command recenter-top-bottom other-window))
       (advice-add command :after #'pulse-line))
   #+end_src
** Pager mode
   M-x view-mode enables pager behavior.
   I want read-only files to automatically use pager mode:

   #+begin_src emacs-lisp
     (setq view-read-only t)
   #+end_src
** Mail mode for neomutt
   When editing a message from neomutt, I want to use mail mode.
   Even though I won't be sending the email from there, I like the syntax highlighting :)

   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("/neomutt-" . mail-mode))
   #+end_src
** Zap up to char
It's more useful for me to be able to delete up to a character instead of to and including a character:

#+begin_src emacs-lisp
  (global-set-key (kbd "M-z") 'zap-up-to-char)
#+end_src
** Expand
Use hippie expand instead of dabbrev-expand:

#+begin_src emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

** Prefer newer file loading
#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src

* Misc settings
** Enable all commands
   By default, Emacs disables some commands.
   I want to have these enabled so I don't get a prompt whenever I try to use a disabled command.

   #+begin_src emacs-lisp
     (setq disabled-command-function nil)
   #+end_src
** More extensive apropos
#+begin_src emacs-lisp
(setq apropos-do-all t)
#+end_src

* References
  Here's a list of good articles I encountered about configging emacs:
  - [[https://karthinks.com/software/batteries-included-with-emacs/][Batteries included with Emacs]]
  - [[https://karthinks.com/software/more-batteries-included-with-emacs/][More batteries included with emacs]]
