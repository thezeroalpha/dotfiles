#!/usr/bin/env bash
# vim:foldmethod=indent:foldlevel=0
cd() { builtin cd -P "$@" || return; ls; }                                  # list contents after cding
mkcd() { mkdir -p -- "$1" && cd -p -- "$1" || return; }                     # make dir and cd at the same time
procinfo() { ps aux | grep "$1"; }                                          # get info about a process (by name)
rmempty() { find "${1-.}"  -type d -empty -depth -delete; }                 # remove empty directories
hr() { for ((i=0; i<$(tput cols); i++)); do echo -n "#"; done; echo; }      # insert a <hr> in the terminal
vimq() { vim -q <($(fc -nl -1)); }                                          # load results of last command (often ag) in vim quickfix
gpip(){ PIP_REQUIRE_VIRTUALENV="" pip "$@"; }                               # Access global pip while using virtualenvs
nls() { expr `ls -l | wc -l | xargs echo` - 1; }                            # Count the number of files in the directory

notify() {
  if type terminal-notifier &> /dev/null; then
    terminal-notifier -title "$1" -message "$2" -activate com.googlecode.iterm2
  else
    echo '\a'
  fi
}
reload() {
  local START_TIME=$SECONDS
  if [[ $SHELL = *"zsh"* ]]; then
    source "$HOME"/.zshrc
  elif [[ $SHELL = *"bash"* ]]; then
    source "$HOME"/.bash_profile
  fi
  echo "Reloaded config ($(( SECONDS-START_TIME )) sec)."
}
extract () {
  if [ -f "$1" ] ; then
    case $1 in
      *.tar.bz2)   tar xjf "$1"     ;;
      *.tar.gz)    tar xzf "$1"     ;;
      *.bz2)       bunzip2 "$1"     ;;
      *.rar)       unrar e "$1"     ;;
      *.gz)        gunzip "$1"      ;;
      *.tar)       tar xf "$1"      ;;
      *.tbz2)      tar xjf "$1"     ;;
      *.tgz)       tar xzf "$1"     ;;
      *.zip)       unzip "$1"       ;;
      *.Z)         uncompress "$1"  ;;
      *.7z)        7z x "$1"        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Docker functions
if command -v docker &>/dev/null; then
  eslint_here() {
    docker run -it --rm -v $(pwd):/data cytopia/eslint . -f unix;
  }
fi

# Applescript-reliant functions
if command -v osascript &> /dev/null; then
  # cd to current Finder directory
  cdf() {
    local target=$(osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)')
    if [ "$target" != "" ]; then
      cd "$target" || return; pwd
    else
      echo 'No Finder window found' >&2
    fi
  }

  # echo current Finder directory
  gdf() {
    osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'
  }
  # echo selected Finder file
  fsel() {
    osascript -e 'tell application "Finder" to return POSIX path of (first item of (get selection as alias list) as alias)' | rev | sed 's/^\///' | rev;
  }
fi

# fzf-reliant functions
if [ -f ~/.fzf.zsh  ] || [ -f ~/.fzf.bash ]; then
  export FZF_DEFAULT_OPTS="--preview-window right:100:hidden:wrap --bind '?:toggle-preview' --preview='(bat --style=numbers --color=always {} || cat {}) 2>/dev/null | head -500'"
  export FZF_DEFAULT_COMMAND="ag -l -g \"\""
  # script edit
  se() {
    local files
    IFS=$'\n' files=($(command find "$(readlink ~/.scripts)" -type f -not -ipath "*/.git/*" | fzf -m --inline-info --prompt="edit> " --height=40 --reverse))
    [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
  }
  # script create
  sc() {
    [ -z "$1" ] && echo "Filename must be passed as an argument." && return 1
    vim $DOTFILES/scripts/"$1" && chmod +x $DOTFILES/scripts/"$1"
  }

  # script find
  sf() {
    local f
    IFS=$'\n' f=($(command find "$(readlink ~/.scripts)" -type f -not -ipath "*/.git/*" | fzf +m --prompt="find> " --height=40 --reverse --cycle))
    [[ -n "$f" ]] && printf "$f"
  }

  # config edit
  ce() {
    local files
    IFS=$'\n' files=($(command find ~/.dotfiles -type f ! -ipath "*/.git/*" ! -ipath "*/bin/*" ! -ipath "*/oh-my-zsh/*" | fzf -m --inline-info --prompt="edit> " --height=40 --reverse))
    [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
  }
  # vim setting edit
  ve() {
    local files
    IFS=$'\n' files=($(command find ~/.dotfiles/vim -type f -not -ipath "*/.git/*" | fzf -m --inline-info --prompt="edit (vim)> " --height=40 --reverse))
    [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
  }
  # run python
  rp() {
    fzf --print-query --preview-window=right:50% --preview 'python -c {q}' <<<''
  }
  # Run ruby
  rr() {
    fzf --print-query --preview-window=right:50% --preview 'ruby -e {q}' <<<''
  }
  # run bash
  rb() {
    fzf --print-query --preview-window=right:50% --preview 'bash -c {q}' <<<''
  }
  # run json
  rj() {
    fzf --preview "cat $1 | jq {q}"
  }
fi

# clipcopy - Copy data to clipboard (from oh-my-zsh)
# Usage:
#  <command> | clipcopy    - copies stdin to clipboard
#  clipcopy <file>         - copies a file's contents to clipboard
function clipcopy() {
  emulate -L zsh
  local file=$1
  if [[ $OSTYPE == darwin* ]]; then
    if [[ -z $file ]]; then
      pbcopy
    else
      cat $file | pbcopy
    fi
  elif [[ $OSTYPE == (cygwin|msys)* ]]; then
    if [[ -z $file ]]; then
      cat > /dev/clipboard
    else
      cat $file > /dev/clipboard
    fi
  else
    if (( $+commands[xclip] )); then
      if [[ -z $file ]]; then
        xclip -in -selection clipboard
      else
        xclip -in -selection clipboard $file
      fi
    elif (( $+commands[xsel] )); then
      if [[ -z $file ]]; then
        xsel --clipboard --input
      else
        cat "$file" | xsel --clipboard --input
      fi
    else
      print "clipcopy: Platform $OSTYPE not supported or xclip/xsel not installed" >&2
      return 1
    fi
  fi
}

# clippaste - "Paste" data from clipboard to stdout (from oh-my-zsh)
# Usage:
#   clippaste   - writes clipboard's contents to stdout
#   clippaste | <command>    - pastes contents and pipes it to another process
#   clippaste > <file>      - paste contents to a file
function clippaste() {
  emulate -L zsh
  if [[ $OSTYPE == darwin* ]]; then
    pbpaste
  elif [[ $OSTYPE == (cygwin|msys)* ]]; then
    cat /dev/clipboard
  else
    if (( $+commands[xclip] )); then
      xclip -out -selection clipboard
    elif (( $+commands[xsel] )); then
      xsel --clipboard --output
    else
      print "clipcopy: Platform $OSTYPE not supported or xclip/xsel not installed" >&2
      return 1
    fi
  fi
}
