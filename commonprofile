### SIMPLE COMMANDS ###
alias c="clear"
alias fucking="sudo"
alias virc="vim ~/.vimrc"
alias cp='cp -iv'                                               # Preferred 'cp' implementation
alias mv='mv -iv'                                               # Preferred 'mv' implementation
alias mkdir='mkdir -pv'                                         # Preferred 'mkdir' implementation
alias l="ls -lah"                                               # Preferred 'ls' implementation
alias ll="ls -FGlAhpO@"                                         # Preferred 'ls' implementation
alias less='less -RXc'                                          # Preferred 'less' implementation
alias rsync='rsync -avhW --progress'                            # Preferred 'rsync' implementation
alias rrsync='rsync -avhW --progress --remove-source-files'     # Rsync, but remove source
alias top='sudo htop'                                           # Top should launch htop with sudo
alias g='git'
alias r='ranger'
cd() { builtin cd -P "$@"; ls; }                                # List contents after cding
mkcd() { mkdir -p -- "$1" && cd -P -- "$1" }                    # Make dir and cd at the same time
procinfo() { ps -aux | grep $1 }                                # Get info about a process (by name)
rmempty() { find ${1-.}  -type d -empty -depth -delete }        # Remove empty directories
batterypct() { ioreg -l | awk '$3~/Capacity/{c[$3]=$5}END{OFMT="%.2f%%";max=c["\"MaxCapacity\""];print(max>0?100*c["\"CurrentCapacity\""]/max:"?")}' | sed 's/\..*//' }

### DOUG SCRIPTS TRIAL RESET ###
alias rs_notinplaylist="rm /Users/alex/Library/iTunes/.ntnny.txt"
alias rs_removedeadtracks="rm /Users/alex/Library/iTunes/.superremoveapp.plist"

### MAC UI CUSTOMISATIONS ###
alias changedock="defaults write com.apple.dock contents-immutable -bool false;killall Dock"
alias nochangedock="defaults write com.apple.dock contents-immutable -bool true;killall Dock"
alias dockspacer="defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}'; killall Dock"
alias spotlighton="sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist"
alias spotlightoff="sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist"

### SERVICES ###
alias loadftp="sudo launchctl load /System/Library/LaunchDaemons/ftp.plist"
alias unloadftp="sudo launchctl unload /System/Library/LaunchDaemons/ftp.plist"
alias startftp="sudo launchctl start com.apple.ftpd"
alias stopftp="sudo launchctl stop com.apple.ftpd"
alias startapache="sudo launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist"
alias stopapache="sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist"
alias startpg="pg_ctl -D $(brew --prefix)/var/postgres start"

### MORE COMPLEX FUNCTIONS ###
pip3-upgrade() {
    pip3 list --outdated | cut -d ' ' -f1 | xargs -n1 pip3 install -U
}

notify() {
    if type terminal-notifier &> /dev/null; then
        terminal-notifier -title "$1" -message "$2" -activate com.googlecode.iterm2
    else
        echo '\a'
    fi 
}

gemmaster() {
    gem update;
    gem update rails;
    gem cleanup;
}

webmTOmp4() {
    ffmpeg -i "$1" -qscale 0 "$1".mp4
}

mp4TOmp3() {
    ffmpeg -i "$1" "$1".mp3
}

gifify() {
    ffmpeg -i $1 -r 25 -f image2pipe -vcodec ppm - | \
        convert -delay 4 -loop 0 - output.gif
}

extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
    *.tar.gz)    tar xzf $1     ;;
    *.bz2)       bunzip2 $1     ;;
    *.rar)       unrar e $1     ;;
    *.gz)        gunzip $1      ;;
    *.tar)       tar xf $1      ;;
    *.tbz2)      tar xjf $1     ;;
    *.tgz)       tar xzf $1     ;;
    *.zip)       unzip $1       ;;
    *.Z)         uncompress $1  ;;
    *.7z)        7z x $1        ;;
    *)     echo "'$1' cannot be extracted via extract()" ;;
    esac
    else
        echo "'$1' is not a valid file"
            fi
}

current_wifi_password() {
    security find-generic-password -ga "$1" | grep password
}

cdf() {
    target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
        if [ "$target" != "" ]; then
            cd "$target"; pwd
        else
            echo 'No Finder window found' >&2
                fi
}
gdf() {
    echo `osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
}

realpath() {
    if [ $# -eq 1 ]; then
        if [ -e $1 ]; then
            if [ -L $1 ]; then
                echo `readlink $1 | rev | cut -d/ -f2- | rev`
            else
                echo `pwd`/`readlink $1 | rev | cut -d/ -f2- | rev`
            fi
        else
            echo "File does not exist."
        fi
    elif [ "$1" = "-w" ]; then
        if [ -e $2 ]; then
            if [ -L $2 ]; then
                echo `readlink $2`
            else
                echo `pwd`/`readlink $2`
            fi
        else
            echo "File does not exist."
        fi
    else
        echo 'idk what you want dude'
    fi
}
unalias() {
    for i in $@; do
        p=`realpath -w $i`
        rm $i
        mv $p .
        unset p
    done
}
linkdir() {
    if [[ "$1" != */ ]]; then
        1=$(echo "$1" | sed "s/$/\//")
    fi
        echo "Linking content of $1 to `pwd`..."
    cr=0
    for f in ./*; do
        if [ -L "$f" ]; then
            rm ./"$f"
            ((cr++))
        fi
    done

    ca=0
    for i in $1*; do
        ln -s "$i" "`echo $i | rev | cut -d/ -f1 | rev`"
        echo "'$i' -> './`echo $i | rev | cut -d/ -f1 | rev`'"
        ((ca++))
    done
    echo "Removed $cr symlinks."
    echo "Linked $ca directories into current directory."
}
######################

### PATH CHANGES ###

# Original path:
# PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin

# Include my scripts in PATH #
export PATH=/Users/alex/.bin:$PATH

#####################

### HOMEBREW VARIABLE CHANGES ###
export EDITOR="vim"
export HOMEBREW_EDITOR="atom"

export CASK_REPO=`brew --repository`/Library/Taps/caskroom/homebrew-cask

######################

### THEFUCK ###
eval $(thefuck --alias)
##############

### VIRTUALENV ###

# Set python 3 location
export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3

# activate virtualenvwrapper
source /usr/local/bin/virtualenvwrapper.sh

# pip should only run if there is a virtualenv currently activated
export PIP_REQUIRE_VIRTUALENV=true

# create commands to override pip restriction.
# use `gpip` or `gpip3` to force installation of
# a package in the global python environment
gpip(){
   PIP_REQUIRE_VIRTUALENV="" pip "$@"
}
gpip3(){
   PIP_REQUIRE_VIRTUALENV="" pip3 "$@"
}
