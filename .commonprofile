### SIMPLE COMMANDS ###
alias c="clear"
alias fucking="sudo"
alias virc="vim ~/.vimrc"
alias cp='cp -iv'                           # Preferred 'cp' implementation
alias mv='mv -iv'                           # Preferred 'mv' implementation
alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation
alias l="ls -FGlAhp"           # Preferred 'ls' implementation
alias less='less -RXc'
alias top='sudo htop'
alias g='git'
alias r='ranger'
cd() { builtin cd "$@"; ls; }
mkcd() { mkdir -p -- "$1" && cd -P -- "$1" }
procinfo() { ps -aux | grep $1 }

### DOUG SCRIPTS TRIAL RESET ###
alias rs_notinplaylist="rm /Users/alex/Library/iTunes/.ntnny.txt"
alias rs_removedeadtracks="rm /Users/alex/Library/iTunes/.superremoveapp.plist"

### MAC UI CUSTOMISATIONS ###
alias changedock="defaults write com.apple.dock contents-immutable -bool false;killall Dock"
alias nochangedock="defaults write com.apple.dock contents-immutable -bool true;killall Dock"
alias dockspacer="defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}'; killall Dock"
alias spotlighton="sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist"
alias spotlightoff="sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist"

### SERVICES ###
alias loadftp="sudo launchctl load /System/Library/LaunchDaemons/ftp.plist"
alias unloadftp="sudo launchctl unload /System/Library/LaunchDaemons/ftp.plist"
alias startftp="sudo launchctl start com.apple.ftpd"
alias stopftp="sudo launchctl stop com.apple.ftpd"
alias startapache="sudo launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist"
alias stopapache="sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist"
alias startpg="pg_ctl -D $(brew --prefix)/var/postgres start"

### MORE COMPLEX FUNCTIONS ###
pip3-upgrade() {
    pip3 list --outdated | cut -d ' ' -f1 | xargs -n1 pip3 install -U
}

notify() {
    terminal-notifier -title "Task Finished" -message "Done"
}

brewmaster() {
    brew update;
    brew update;
    { brew outdated; brew cask outdated; } | less;
    brew upgrade;
    brew cask upgrade;
    brew cleanup -s;
    brew cask cleanup;
    brew prune;
    brew doctor;
    notify;
}

gemmaster() {
    gem update;
    gem update rails;
    gem cleanup;
}

webmTOmp4() {
    ffmpeg -i "$1" -qscale 0 "$1".mp4
}

mp4TOmp3() {
    ffmpeg -i "$1" "$1".mp3
}

gifify() {
    ffmpeg -i $1 -r 25 -f image2pipe -vcodec ppm - | \
        convert -delay 4 -loop 0 - output.gif
}

extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
    *.tar.gz)    tar xzf $1     ;;
    *.bz2)       bunzip2 $1     ;;
    *.rar)       unrar e $1     ;;
    *.gz)        gunzip $1      ;;
    *.tar)       tar xf $1      ;;
    *.tbz2)      tar xjf $1     ;;
    *.tgz)       tar xzf $1     ;;
    *.zip)       unzip $1       ;;
    *.Z)         uncompress $1  ;;
    *.7z)        7z x $1        ;;
    *)     echo "'$1' cannot be extracted via extract()" ;;
    esac
    else
        echo "'$1' is not a valid file"
            fi
}

current_wifi_password() {
    security find-generic-password -ga "$1" | grep password
}

cdf() {
    target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
        if [ "$target" != "" ]; then
            cd "$target"; pwd
        else
            echo 'No Finder window found' >&2
                fi
}
gdf() {
    echo `osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
}


######################

### PATH CHANGES ###

# Original path:
# PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin

# Include my scripts in PATH #
export PATH=$PATH:/Users/alex/.bin

#####################

### HOMEBREW VARIABLE CHANGES ###
export EDITOR="vim"
export HOMEBREW_EDITOR="atom"


######################
