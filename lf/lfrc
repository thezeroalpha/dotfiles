# vim: foldmethod=marker foldlevel=0
# General settings {{{
# interpreter for shell commands (needs to be POSIX compatible)
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

set color256 on
set previewer ~/.config/lf/preview.sh

# }}}
# Command definitions {{{
# define a custom 'open' command
cmd _open &{{
    case $(file --mime-type "$f" -b) in
        text/*|application/json) $EDITOR $fx;;
        image/*) sxiv $fx 2>&1 & disown;;
        application/epub+zip) ebook-viewer $fx >/dev/null 2>&1 & disown;;
        video/*) mpvq $f;;
        *) for f in $fx; do $OPENER "$f" > /dev/null 2> /dev/null & disown; done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# copy the path of the highlighted file
cmd copy_path ${{
  set -f
  if command -v pbcopy > /dev/null 2> /dev/null; then
    echo "$f" | tr -d '\n' | pbcopy
  elif command -v xclip > /dev/null 2> /dev/null; then
    echo "$f" | tr -d '\n' | xclip -sel clip
  fi
}}

# zip a directory/file
cmd zip ${{
  set -f
  mkdir $f-zip
  cp -r $fx $f-zip
  (cd $f-zip/ && zip -r $f.zip .)
  rm -rf $f-zip/
}}

# paste as a symbolic link to original
cmd paste_link %{{
  load=$(lf -remote 'load')
  mode=$(echo "$load" | sed -n '1p')
  list=$(echo "$load" | sed '1d')

  echo $list | while read -r fil; do
    lf -remote "send %ln -s $fil .";
  done
}}

# paste and rename the file on paste
cmd paste_rename %{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=($(echo "$load" | sed '1d'))
    declare -a newnames
    for i in "${!list[@]}"; do
      printf "Rename ${list[$i]} to: "
      read newname
      newnames[$i]="$newname"
    done
    for i in "${!list[@]}"; do
      if [ $mode = 'copy' ]; then
        if command -v rsync &>/dev/null; then
          rsync -ah --ignore-existing --progress "${list[$i]}" . && mv ./"${list[$i]##*/}" ./"${newnames[$i]}"
        else
          cp -r "${list[$i]}" ./"${newnames[$i]}"
        fi
      elif [ $mode = 'move' ]; then
        if command -v rsync &>/dev/null; then
          rsync -ah --ignore-existing --remove-source-files "${list[$i]}" . && mv ./"${list[$i]##*/}" ./"${newnames[$i]}"
        else
          mv "${list[$i]}" ./"${newnames[$i]}"
        fi
      fi
    done
    lf -remote 'send load'
    lf -remote 'send clear'
}}


# improve regular paste to work if files are moved between different devices
cmd paste %{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
      if command -v rsync &>/dev/null; then
        rsync -ah --ignore-existing --progress $list .
      else
        cp -r $list .
      fi
    elif [ $mode = 'move' ]; then
      if command -v rsync &>/dev/null; then
        rsync -ah --ignore-existing --remove-source-files $list .
      else
        mv $list .
      fi
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}

# preview the highlighted file with quicklook
cmd ql_preview &{{
  qlmanage -p "$fx" &> /dev/null;
}}

# open the lfrc, and source after saving
cmd edit_config :{{
  $$EDITOR ~/.config/lf/lfrc
  source ~/.config/lf/lfrc
}}

# quickly cd into frecent directories using github.com/rupa/z
cmd z ${{
    set +u
    if [ $# -gt 0 ]; then
      dest=''
      # See: https://github.com/skywind3000/z.lua or https://github.com/rupa/z
      if [ -f "$DOTFILES/shell/z/z.sh" ]; then
          export _Z_NO_PROMPT_COMMAND=1
          source "$DOTFILES/shell/z/z.sh"
          dest="$(_z "$@" && pwd)"
      fi

      if test -n "${dest}"; then
          lf -remote "send $id cd '${dest}'"
      fi
    fi
}}
# }}}
# Mappings {{{
# execute current file (must be executable)
map ; push :
map x $$f
map X !$f

# dedicated keys for file opener actions
map o
map O
map o :_open $fx
map O push hol
map v ql_preview
map r reload

map f
map f $lf -remote "send $id select \"$(fzf)\""

map .
map . set hidden!

map <esc>
map <esc> unselect; clear

map g?
map g? $lf -doc | $PAGER; clear

map R push :rename<space>
map cw push :rename<space>
map E $$EDITOR $f
map D delete
map <enter> :_open $fx
map S shell
map Y copy_path

map p
map pp paste
map pl paste_link
map pr paste_rename

map i $~/.config/lf/preview.sh $f | less -R

map gd. cd ~/Documents
map gds cd ~/Documents/School
map gdz cd ~/Documents/Programming/thezeroalpha.github.io/
map gb cd ~/Documents/Calibre\ Library/
map gdp cd ~/Documents/Personal\ documents/
map gD cd ~/Desktop
map gl cd ~/Downloads
map gw cd ~/Dropbox/vimwiki
map g/ cd /
map g. cd ~/.dotfiles
map gv cd /Volumes

map u
map uu unselect
map uy clear
map ud clear
map a :unselect; invert
map U redraw
map U redraw

map c
map cf push %touch<space>
map cd push %mkdir<space>
map e
map ee $$EDITOR $f
map ec edit_config
map ce edit_config

map tz zip
map tu extract

map z push :z
