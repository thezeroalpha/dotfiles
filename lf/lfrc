# vim: foldmethod=marker foldlevel=0 filetype=lfrc
# General settings {{{
# interpreter for shell commands (needs to be POSIX compatible)
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

set previewer ~/.config/lf/preview
set ignorecase true
set preview true
set icons

# }}}
# Command definitions {{{
# the prefix shows what kind of command it is
#   $: runs as shell command
#   %: runs as piped shell command (stdout => statusline)
#   !: runs as interactive shell command (puts lf in the bg)
#   :: runs as lf command
#
# commands run in the shell, you can use $f, $fs, $fx vars.
# you can also send remote commands.

# define a custom 'open' command
cmd open $opener $fx

# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

cmd change %{{
  printf "Substitute: "
  read -r sedcmd
  mv "$f" "$(dirname "$f")/$(printf '%s' "$(basename "$f")" | sed "s$sedcmd")"
}}

# queue an audio file in mpd
cmd queue %{{
  for i in $fx; do
    case "$i" in
      *.wav|*.flac|*.mp3|*.m4a)
        mpc -h ~/.local/share/mpd/socket insert "file://$i"
        printf "Queued: %s\n" "$i"
        ;;
    esac
  done
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# copy the path of the highlighted file
cmd copy_path ${{
  set -f
  if command -v pbcopy > /dev/null 2> /dev/null; then
    echo "$f" | tr -d '\n' | pbcopy
  elif command -v xclip > /dev/null 2> /dev/null; then
    echo "$f" | tr -d '\n' | xclip -sel clip
  fi
}}

# zip a directory/file
cmd zip ${{
  set -f
  mkdir $f-zip
  cp -r $fx $f-zip
  (cd $f-zip/ && zip -r $f.zip .)
  rm -rf $f-zip/
}}

cmd tar ${{
  set -f
  mkdir $f-tgz
  cp -r $fx $f-tgz
  (cd $f-tgz && tar cvzf $f.tar.gz .)
  rm -rf $f-tgz
}}

cmd paste &{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        rsync -av --ignore-existing --progress $list . \
        | stdbuf -i0 -o0 -e0 tr '\r' '\n' \
        | while read line; do
            lf -remote "send $id echo $line"
        done
    elif [ $mode = 'move' ]; then
        mv -n $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}

# paste as a symbolic link to original
cmd paste_link %{{
  for file in $(lf -remote 'load'); do
    if [ ! -n "${mode+1}" ]; then
      mode="$file"
      continue
    fi
    files+=("$file")
  done
  if [ -z "$files" ] || [ "${#files[@]}" -lt 1 ]; then
    lf -remote "send $id echo no files to link files: ${files}"
    exit 0
  fi
  ln -sr $files -t .
}}

# preview the highlighted file with quicklook
cmd ql_preview &{{
  qlmanage -p "$fx" &> /dev/null;
}}

# open the lfrc, and source after saving
cmd edit_config :{{
  $$EDITOR ~/.config/lf/lfrc
  source ~/.config/lf/lfrc
}}

# quickly cd into frecent directories using github.com/rupa/z
cmd z ${{
    set +u
    if [ $# -gt 0 ]; then
      dest=''
      # See: https://github.com/skywind3000/z.lua or https://github.com/rupa/z
      if [ -f "$DOTFILES/shell/z/z.sh" ]; then
          export _Z_NO_PROMPT_COMMAND=1
          source "$DOTFILES/shell/z/z.sh"
          dest="$(_z "$@" && pwd)"
      fi

      if test -n "${dest}"; then
          lf -remote "send $id cd '${dest}'"
      fi
    fi
}}

# trash command with confirmation
cmd trash %{{
  for f in $fx; do
    printf "Trash $f? [Y/n/a] "
    read -r ans
    case "$ans" in
      Y*|y*) trash "$f"; printf "Deleted $f.\n";;
      A*|a*) trash $fx; printf "Deleted all files.\n"; break;;
      *) printf "Not deleting $f\n"; sleep 1;;
    esac
  done
}}

cmd trashempty %{{
  printf "Empty trash? [Y/n] "
  read -r ans
  case "$ans" in
    Y*|y*) trash -ey; printf "Emptied.\n";;
    *) printf "Not emptying.\n";;
  esac
}}

cmd pgp_encrypt_recipient %{{
  printf "Recipient: "
  read -r recipient
  case "$recipient" in
    "") printf "Cancelled.\n";;
    *) gpg --encrypt --sign --recipient "$recipient" $f;;
  esac
}}

cmd pgp_encrypt_pass ${{
  gpg --symmetric $f;
}}

cmd pgp_decrypt ${{
  gpg --output ${f%.gpg} --decrypt $f
}}

# Encode input into binary or ASCII-armored output with an integrated signature
cmd pgp_sign ${{
  gpg --sign $f
}}

# Wrap input in plaintext signature
cmd pgp_sign_clear ${{
  gpg --clearsign $f
}}

# Create binary or ASCII-armored detached signature from input
cmd pgp_sign_detach ${{
  gpg --detach-sign $f
}}

# Select based on glob filter
cmd filter %{{
  printf "Filter: "
  read -r filter_expr
  lf -remote "send $id unselect"
  lf -remote "send $id glob-select $filter_expr"
}}
# }}}
# Mappings {{{
# execute current file (must be executable)
map ; push :
map x $$f
map X !$f

# avoid a crash
map w

# dedicated keys for file opener actions
map o
map O
map o open $fx
map O $open $(dirname $f)
map v ql_preview
map r reload

map f
map f $lf -remote "send $id select \"$(fzf)\""

map .
map . set hidden!

map <esc>
map <esc> unselect; clear

map g?
map g? $lf -doc | $PAGER; clear

map R push :rename<space>
map C change
map cw push :rename<space>
map E $$EDITOR $fx
map D trash
map <enter> open $fx
map S shell
map Y copy_path
map Q queue

map p
map pp paste
map pl paste_link

map i $~/.config/lf/preview $f | less -R

map gd. cd ~/Documents
map gds cd ~/Documents/School
map gdw cd ~/Documents/Programming/alex.balgavy.eu/
map gdb cd ~/Documents/Programming/blog.alex.balgavy.eu/
map gdl cd ~/Documents/Programming/lectures.alex.balgavy.eu/
map gb cd ~/Documents/Calibre\ Library/
map gdp cd ~/Documents/Personal\ documents/
map gD cd ~/Desktop
map gl cd ~/Downloads
map gw cd ~/Dropbox/vimwiki
map gm cd ~/Music/Libraries/Mine
map g/ cd /
map g. cd ~/.dotfiles
map gv cd /Volumes
map gt cd ~/.Trash/

map <space> :toggle; down
map F filter

map u
map uu unselect
map uy clear
map ud clear
map a :unselect; invert
map U redraw
map U redraw

map c
map cf push %touch<space>
map cd push %mkdir<space>
map e
map ee $$EDITOR $f
map ec edit_config
map ce edit_config

map tz zip
map tt tar
map tu extract
map te pgp_encrypt_recipient
map tp pgp_encrypt_pass
map td pgp_decrypt
map ts. pgp_sign
map tsc pgp_sign_clear
map tsd pgp_sign_detach

map z push :z
