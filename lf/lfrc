# vim: foldmethod=marker foldlevel=0
# General settings {{{
# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

set color256 on
set previewer ~/.config/lf/preview.sh

# }}}
# Command definitions {{{
# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*|application/json) $EDITOR $fx;;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

cmd copy_path ${{
  set -f
  if command -v pbcopy > /dev/null 2> /dev/null; then
    echo "$f" | tr -d '\n' | pbcopy
  elif command -v xclip > /dev/null 2> /dev/null; then
    echo "$f" | tr -d '\n' | xclip -sel clip
  fi
}}
cmd zip ${{
  set -f
  mkdir $f-zip
  cp -r $fx $f-zip
  (cd $f-zip/ && zip -r $f.zip .)
  rm -rf $f-zip/
}}
cmd paste_link %{{
  load=$(lf -remote 'load')
  mode=$(echo "$load" | sed -n '1p')
  list=$(echo "$load" | sed '1d')

  echo $list | while read -r fil; do
    lf -remote "send %ln -s $fil .";
  done
}}
cmd ql_preview &{{
  qlmanage -p "$fx" &> /dev/null;
}}
cmd edit_config :{{
  $$EDITOR ~/.config/lf/lfrc
  source ~/.config/lf/lfrc
}}
# }}}
# Mappings {{{
# execute current file (must be executable)
map ; push :
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &open $fx
map O push hol
map v ql_preview
map r reload

map R push :rename<space>
map cw push :rename<space>
map E $$EDITOR $f
map D delete
map <enter> &open $fx
map S shell
map Y copy_path

map p
map pp paste
map pl paste_link

map i $~/.config/lf/preview.sh $f | less -R

map gd cd ~/Documents
map gD cd ~/Desktop
map gl cd ~/Downloads
map gw cd ~/Dropbox/vimwiki
map gz cd ~/Documents/Programming/thezeroalpha.github.io/
map g/ cd /
map gs cd ~/Documents/School
map g. cd ~/.dotfiles
map gp cd ~/Documents/Programming

map u
map uu unselect
map uy clear
map ud clear
map a :unselect; invert
map U redraw
map U redraw

map c
map cf push %touch<space>
map cd push %mkdir<space>
map e
map ee $$EDITOR $f
map ec edit_config

map tz zip
