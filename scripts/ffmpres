#!/usr/bin/env bash
if ! command -v ffmpeg &> /dev/null; then echo "ffmpeg not found" && exit 1; fi
main() {
  case "$1" in
    *.gif)
      if ! [ -f "$1" ] ; then echo "$1 not found." && exit 1; fi
      echo "GIF: $1"
      process_gif "$1"
      ;;
    *.mp4|*.mov|*.webm|*.m4v|*.mkv)
      if ! [ -f "$1" ] ; then echo "$1 not found." && exit 1; fi
      echo "VIDEO: $1"
      process_video "$@"
      ;;
    *.mp3|*.wav|*.ogg|*.flac|*.m4a)
      if ! [ -f "$1" ] ; then echo "$1 not found." && exit 1; fi
      echo "AUDIO: $1"
      process_audio "$@"
      ;;
    "")
      process_misc
      ;;
    *)
      echo "File type not supported."
      ;;
  esac
}

process_misc() {
  echo "For other functionality, please add the filename as the first argument."
  select operation in "Record audio" "List devices"; do
    case "$operation" in
      "Record audio")
        echo -n "Devices to record (format n:n): ";
        read -r record_src;
        echo -n "Output filename: ";
        read -r out_name;
        ffmpeg -f avfoundation -i "$record_src" "${out_name:-output.mkv}"
        break;;
      "List devices")
        ffmpeg -f avfoundation -list_devices true -i "";
        break;;
      *)
        break;;
    esac
  done
}

process_gif() {
  select to_fmt in "MP4"; do
    case "$to_fmt" in
      "MP4")
        ffmpeg -i "$1" -r 30 -movflags faststart -pix_fmt yuv420p -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" "${1%%.gif}.mp4"
        break;;
      *)
        break;;
    esac
  done
}

process_audio() {
  select operation in "VOLUME" "CLIP"; do
    case "$operation" in
      "VOLUME")
        read -rp "Amount or percent: " vol;
        read -rp "Enter output filename: " outfile
        ffmpeg -i "$1" -filter:a "volume=$vol" "${outfile:-out-$1}"
        break;;
      "CLIP")
        read -rp "From time (blank if from start): " starttime
        read -rp "To time (blank if till end): " endtime
        read -rp "Save as: " outfile
        if [ -z "$endtime" ]; then
          ffmpeg -i "$1" -ss "$starttime" "$outfile"
        elif [ -z "$starttime" ]; then
          ffmpeg -i "$1" -to "$endtime" "$outfile"
        else
          ffmpeg -i "$1" -ss "$starttime" -to "$endtime" "$outfile"
        fi
        break;;
      *)
        break;;
    esac
  done
}

process_video() {
  select to_fmt in "MP4" "MP3" "GIF" "NO AUDIO" "CONCAT" "CLIP" "VOLUME" "FAST" "SLOW" "SCREENSHOT" "OPTIMISE"; do
    case "$to_fmt" in
      "MP4")
        ffmpeg -i "$1" -vcodec copy -qscale 0 -c:s mov_text "${1%%.*}.mp4"
        break;;
      "MP3")
        ffmpeg -i "$1" "${1%%.*}.mp3"
        break;;
      "GIF")
        printf "FPS (default 24): "
        read -r fps
        printf "Scale (default unchanged): "
        read -r scale
        if [ -n "$scale" ]; then
          local filters="fps=${fps:-24},scale=$scale:flags=lanczos"
        else
          local filters="fps=${fps:-24},scale=0:-1:flags=lanczos"
        fi
        echo "Creating gif"
        local palette="/tmp/palette.png"
        ffmpeg -v warning -i "$1" -vf "$filters,palettegen" -y "$palette"
        ffmpeg -v warning -i "$1" -i "$palette" -lavfi "$filters [x]; [x][1:v] paletteuse" -y "${1%%.*}.gif"
        break;;
      "NO AUDIO")
        ffmpeg -i "$1" -an "silent-$1"
        break;;
      "CONCAT")
        if [ $# -le 1 ]; then echo "Only one file supplied, need at least two." && exit 1; fi
        read -rp "Enter output filename: " outfile
        set -x
        tempfile="./ffmpeg-list-$RANDOM"
        for f in "$@"; do echo "file '$f'" >> "$tempfile"; done
        ffmpeg -f concat -safe 0 -i "$tempfile" -c copy "$outfile"
        rm "$tempfile"
        break;;
      "CLIP")
        read -rp "From time: " starttime
        read -rp "To time: " endtime
        read -rp "Save as: " outfile
        if [ -z "$endtime" ]; then
          ffmpeg -i "$1" -ss "$starttime" "${outfile:-out-$1}"
        elif [ -z "$starttime" ]; then
          ffmpeg -i "$1" -to "$endtime" "${outfile:-out-$1}"
        else
          ffmpeg -i "$1" -ss "$starttime" -to "$endtime" "${outfile:-out-$1}"
        fi
        break;;
      "VOLUME")
        read -rp "Amount or percent: " vol;
        read -rp "Enter output filename: " outfile
        ffmpeg -i "$1" -filter:a "volume=$vol" "${outfile:-out-$1}"
        break;;
      "FAST")
        read -rp "Enter output filename: " outfile
        ffmpeg -i "$1" -filter_complex "[0:v]setpts=0.5*PTS[v];[0:a]atempo=2.0[a]" -map "[v]" -map "[a]" "${outfile:-out-$1}"
        break;;
      "SLOW")
        read -rp "Enter output filename: " outfile
        ffmpeg -i "$1" -filter_complex "[0:v]setpts=1.5*PTS[v];[0:a]atempo=0.67[a]" -map "[v]" -map "[a]" "${outfile:-out-$1}"
        break;;
      "SCREENSHOT")
        read -rp "Timestamp to extract: " ts
        ffmpeg -ss "$ts" -i "$1" -frames:v 1 -q:v 2 "$1.jpg"
        break;;
      "OPTIMISE")
        codec="$(ffprobe -v error -select_streams v:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$1")"
        read -rp "Enter output filename: " outfile
        if [ "$codec" = "h264" ]; then
          read -rp "Use h265? [Y/n] " -n 1 conf
          echo
          if [ "$conf" = "Y" ] || [ "$conf" = "y" ]; then
            read -rp "CRF value (24..30, lower == higher bitrate): " crf
            ffmpeg -i "$1" -vcodec libx265 -crf "$crf" "${outfile:-optimised-$1}"
            return
          fi
        fi
        read -rp "CRF value (18..24, lower == higher bitrate): " crf
        ffmpeg -i "$1" -vcodec libx264 -crf "$crf" "${outfile:-optimised-$1}"
        break;;
      *)
        ;;
    esac
  done
}
main "$@"
