#!/bin/sh
# Linkhandler: handles links. Like `opener` but for URLs
case "$1" in
  *bandcamp.com*)
    case "$(printf 'Download\nPlay' | "$CHOOSER")" in
      Download)
        DOWNLOAD_DIR="$HOME"/Downloads/songs/listen\ to
        mkdir -p "$DOWNLOAD_DIR"
        cd "$DOWNLOAD_DIR" || { printf "Couldn't cd into download directory %s\n" "$DOWNLOAD_DIR"; exit 1; }
        command -v youtube-dl 1>/dev/null 2>&1 || { printf "Youtube-dl required.\n"; exit 1; }

        url="$1"
        name="${url##*/}"
        artist="$(printf "%s" "$url" | sed 's|https*://||;s:\.bandcamp\.com.*::')"

        [ -d "$artist" ] || mkdir -p "$artist"
        cd "$artist" || { printf "Couldn't cd into directory %s\n" "$(pwd)/$artist"; exit 1; }
        [ -d "$name" ] || mkdir -p "$name"
        cd "$name" || { printf "Couldn't cd into directory %s\n" "$(pwd)/$name"; exit 1; }
        youtube-dl -f mp3 -o "%(playlist_index)s %(title)s %(id)s.%(ext)s" "$url"
        printf "#EXTM3U\n#PLAYLIST:%s\n#EXTART:%s\n" "$name" "$artist" > "$name".m3u
        youtube-dl -f mp3 --get-filename -o "%(playlist_index)s %(title)s %(id)s.%(ext)s" --exec "notify 'Downloaded $artist - $name' '$url' bcdl" "$url" >> "$name".m3u
        ;;
      Play)
        case "$(printf 'Audio (queue in mpd)\nAudio (mpv)' | "$CHOOSER")" in
          'Audio (queue in mpd)')
            mpc add "$(youtube-dl -x -g "$1")"
            ;;
          'Audio (mpv)')
            mpv --no-audio-display --no-video --volume=50 "$1"
            ;;
        esac
        ;;
    esac
    ;;
  *mkv|*webm|*mp4|*youtube.com/watch*|*youtube.com/playlist*|*yewtu.be*|*youtu.be*|*hooktube.com*|*bitchute.com*|*videos.lukesmith.xyz*|*v.redd.it*|*fb.watch*)
    case "$(printf 'Open\nDownload\nPlay' | "$CHOOSER")" in
      Open)
        open "$1"
        ;;
      Download)
        DOWNLOAD_DIR=~/Downloads/
        case "$(printf 'Both\nAudio\nVideo' | "$CHOOSER")" in
          Both)
            notify 'Download (av) started' "Downloading" linkhandler
            nohup >/dev/null youtube-dl --add-metadata -ic --write-sub --embed-subs -o "$DOWNLOAD_DIR/%(title)s-%(creator)s.%(ext)s" --exec "notify 'Download finished' 'Downloaded.' linkhandler" "$1" & disown
            ;;
          Audio)
            notify 'Download (audio) started' "Downloading" linkhandler
            nohup >/dev/null youtube-dl --add-metadata -xic -f bestaudio/best -o "$DOWNLOAD_DIR/%(title)s-%(creator)s.%(ext)s" --exec "notify 'Download finished' 'Downloaded.' linkhandler" "$1" & disown
            ;;
          Video)
            notify 'Download (video) started' "Downloading" 'linkhandler'
            nohup >/dev/null youtube-dl -f bestvideo --add-metadata -ic --write-sub --embed-subs -o "$DOWNLOAD_DIR/%(title)s-%(creator)s.%(ext)s" --exec "notify 'Download finished' 'Downloaded.' linkhandler" "$1" & disown
            ;;
        esac
        ;;
      Play)
        case "$(printf 'Video\nAudio (queue in mpd)\nAudio (mpv)' | "$CHOOSER")" in
          Video)
            setsid -f mpvq "$1" 1>/dev/null 2>&1
            notify 'Starting mpv' "Opening $1..." 'linkhandler'
            ;;
          'Audio (queue in mpd)')
            mpc add "$(youtube-dl -x -g "$1")"
            ;;
          'Audio (mpv)')
            mpv --no-audio-display --no-video --volume=50 "$1"
            ;;
        esac
        ;;
    esac
    ;;
  *png|*jpg|*jpe|*jpeg|*gif)
    notify 'Starting image viewer' "Opening $1..." 'linkhandler'
    curl -sL "$1" > "/tmp/$(printf "%s" "$1" | sed "s/.*\///")" \
      && opener "/tmp/$(printf "%s" "$1" | sed "s/.*\///")"  1>/dev/null 2>&1 &
    ;;
  *gifv)
    setsid -f mpv -loop "$1" 1>/dev/null 2>&1
    ;;
  *mp3|*flac|*opus|*mp3?source*)
    case "$(printf 'Download\nPlay' | "$CHOOSER")" in
      Download)
        ;;
      Play)
        setsid -f mpv --volume=50 "$1" 1>/dev/null 2>&1
        ;;
    esac
    ;;
  *reddit.com*)
    reddio print -c always "comments/$(printf "%s" "$1" | cut -d/ -f7)" | less -+F -+X
    ;;
  http://*|https://*)   # everything else opens in w3m, can use go-readability within
    # if command -v go-readability >/dev/null 2>&1; then
    #   go-readability "$1" | w3m -config ~/.config/w3m/config -T text/html
    # else
    w3m -config ~/.config/w3m/config -T text/html "$1"
    # fi
    ;;
  '!http'*)
    os=$(uname -s | tr '[:upper:]' '[:lower:]')
    case "$os" in
      linux*)
        setsid -f brave "${1##!}"
        ;;
      darwin*)
        open -a 'Brave Browser' "${1##!}"
        ;;
      msys*|cygwin*|mingw*|nt|win*)
        printf "Windows not supported.\n" >&2
        ;;
      *)
        printf "Operating system %s is unknown.\n" "$os"
        ;;
    esac
    ;;
  '@http'*)
    printf '%s' "${1##@}" | clc
    ;;
  *)
    if [ -f "$1" ]; then "${EDITOR:-vim}" "$1"
    else open "$1" >/dev/null 2>&1
    fi
    ;;
esac

