#!/usr/bin/env perl
# vim: foldmethod=marker
use strict;
use warnings;
use 5.006; # checked with `perlver`

use constant EXIT_USER_CANCELLED => 130;
use constant MPD_HOST => 'localhost';
use constant MPD_PORT => 6600;

sub urlize {
  my ($rv) = @_;
  $rv =~ s/([^A-Za-z0-9])/sprintf("%%%2.2X", ord($1))/ge;
  return $rv;
}

sub un_urlize {
  my ($rv) = @_;
  $rv =~ s/\+/ /g;
  $rv =~ s/%(..)/pack("c",hex($1))/ge;
  return $rv;
}

sub untrack {
  my ($orig_link) = @_;
  if ($orig_link =~ /(https?(?::|%3A)(?:%2F%2F|\/\/).*)/) {
    $orig_link = un_urlize($1);
  }
  $orig_link =~ s/https?(?::|%3A)(?:%2F%2F|\/\/).*(https?(?::|%3A)(?:%2F%2F|\/\/).*)/$1/;
  $orig_link =~ s/utm_[^&]*&?//g;
  $orig_link =~ s/\?$//;
  return $orig_link;
}

my $CHOOSER = $ENV{'CHOOSER'};
unless (length $CHOOSER) {
  die 'Must set CHOOSER in environment.';
}

my $HOME = $ENV{'HOME'};
my $TERM = $ENV{'TERM'};

if ( @ARGV != 1 ) {
  die 'Link necessary.';
}
my ($LINK) = @ARGV;
$LINK = untrack($LINK);

=begin
This subroutine takes a subroutine reference and executes the dereferenced subroutine in a fork.
Basically a way to handle things async by just writing `detach sub { .... }` in code.
Using a fork is OK here because: "If a parent process terminates, then its
"zombie" children (if any) are adopted by init(8), which automatically performs
a wait to remove the zombies."
# https://linux.die.net/man/2/wait
(Also, what a sentence. Fun without the context.)
=cut
sub detach {
  my $funcref = shift;
  if ( fork() == 0 ) {
    $funcref->();
  }
  return;
}

# Runs arguments in surrounding terminal, or creates a new one.
sub launch_in_terminal {
  my $args = shift;
  if (($TERM eq 'dumb') or (not defined $TERM)) {
    system(qq(alacritty -e $args));
  }
  else {
    system($args);
  }
  return;
}

# Send notification via my cross-platform-ish `notify` script
sub notify {
  my ($title, $message) = @_;
  system qq(notify '$title' '$message' linkhandler >/dev/null 2>&1);
  return;
}

# String checking functions {{{1
# Checks if $str (includes|endswith|startswith) any of $substrs
sub checkstr {
  my ($str, $mode, $substrs) = @_;
  my @result;
  if ($mode eq 'includes') {
    @result = grep { index( $str, $_ ) != -1 } @{$substrs};
  }
  elsif ($mode eq 'ends') {
    @result = grep { $str =~ /\Q$_\E$/msx } @{$substrs};
  }
  elsif ($mode eq 'starts') {
    @result = grep { $str =~ /^\Q$_\E/msx } @{$substrs};
  }
  return scalar @result;
}

sub is_bandcamp_track {
  my $link = shift;
  return (checkstr($link, 'includes', ['bandcamp.com', 'godisanastronaut.com']) and checkstr($link, 'includes', ['/track/']));
}

sub is_bandcamp_album {
  my $link = shift;
  return (checkstr($link, 'includes', ['bandcamp.com', 'godisanastronaut.com']) and checkstr($link, 'includes', ['/album/']));
}

sub is_video {
  my $link = shift;
  return (checkstr($link, 'ends', ['mkv', 'webm', 'mp4'])
      or checkstr($link, 'includes', ['youtube.com/watch', 'youtube.com/playlist', 'yewtu.be', 'youtu.be',
        'hooktube.com', 'bitchute.com', 'videos.lukesmith.xyz', 'v.redd.it', 'fb.watch', 'vimeo.com']));
}
sub is_image {
  my $link = shift;
  return checkstr($link, 'ends',  ['png', 'jpg', 'jpe', 'jpeg', 'gif']);
}

sub is_gifv {
  my $link = shift;
  return checkstr($link, 'ends', ['gifv']);
}

sub is_audio {
  my $link = shift;
  return (checkstr($link, 'ends', ['mp3', 'flac', 'opus', 'mp3?source'])
      or checkstr($link, 'includes', ['soundcloud.com']));
}

# Menu builders {{{1
# Choose from @options (passed by reference) via $CHOOSER
sub choose {
  my $options_ref = shift;
  my $options_str = join "\n", @{$options_ref};
  my $selected = `printf '$options_str\n' | "$CHOOSER"`;
  $selected =~ s/\s+$//msx;
  unless (length $selected) {
    exit EXIT_USER_CANCELLED; # user interrupted
  }
  return $selected;
}

# Receives a dispatch table of strings to subroutines, as an array.
# Lets you select one of the strings via `choose`.
# Returns reference to corresponding subroutine.
sub menu {
  my $tableref = shift;

  # Global system open -- should be available for every link

  push @$tableref, ['Open (system)', sub {
    my ($link) = @_;
    system('open', $link);
  }];

  # Global copy -- should be available for every link
  push @$tableref, ['Copy', sub {
    my ($link) = @_;
    system(qq(printf '%s' '$link' | clc));
    notify 'Copied to clipboard', $link;
  }];

  push @$tableref, ['Save', sub {
      my ($link) = @_;
      detach sub {
        system(qq(pocket save '$link'));
        notify 'Saved to Pocket', $link;
      }
    }];

  push @$tableref, ['Archive', sub {
    my ($link) = @_;
    detach sub {
      web_archive($link);
      notify "Archived", "$link";
    }
  }];

  push @$tableref, ['Archive (and copy archived)', sub {
    my ($link) = @_;
    detach sub {
      my $location = web_archive($link);
      system(qq(printf '%s' '$location' | clc));
      notify "Archived $link", "Archived location copied to clipboard: $location";
    }
  }];

  # Choose an option
  my @options = map { $_->[0] } @$tableref;
  my $choice = choose(\@options);

  # Return corresponding the subroutine reference
  my $choice_index = (grep { $options[$_] eq $choice } 0..$#options)[0];
  return $tableref->[$choice_index][1];
}

# Save in the Internet Archive
sub web_archive {
  my $link = shift;
  my $location = `curl -sI 'https://web.archive.org/save/$link' | awk -F': ' '/^location/ { print \$2 }'`;
  return $location;
}


# How to play {{{1
sub play_audio_mpd {
  my $link = shift;

  detach sub {
    if (checkstr($link, 'includes', ['youtube.com/playlist'])) {
      system(qq([ -d "$HOME/.cache/mpd" ] || mkdir -p "$HOME/.cache/mpd"));
      open(my $playlist, '-|', qq(youtube-dl --flat-playlist -j '$link' | jq -r '.url')) or die "Couldn't read playlist $link";
      while (my $song = <$playlist>) {
        chomp $song;
        system(qq(
          title=\$(youtube-dl --ignore-config --get-title '$song' 2>/dev/null);
          printf "%b\n" "\$title\t$song" >> "$HOME/.cache/mpd/linkarchive";

          send_mpd_command() {
            (printf '%s\n' "\$1"; sleep 1) | telnet ${\MPD_HOST} ${\MPD_PORT} 2>/dev/null
          }

          url="\$(youtube-dl -x -g "$song")"
          res="\$(send_mpd_command "addid \$url")"
          song_id="\$(printf '%s' "\$res" | awk -F': ' '/^Id: / { print \$2 }')"
          send_mpd_command "\$(printf 'addtagid %s Artist "%s"\naddtagid %s Title "%s"' "\$song_id" "Youtube" "\$song_id" "\$title")" >/dev/null));
      }
      close($playlist) or die "Could not close handle.";

      notify 'Added playlist', $link;
    }
    else {
      system(qq([ -d "$HOME/.cache/mpd" ] || mkdir -p "$HOME/.cache/mpd";
        title=\$(youtube-dl --ignore-config --get-title "$link" 2>/dev/null);
        printf "%b\n" "\$title\t$link" >> "$HOME/.cache/mpd/linkarchive";

        send_mpd_command() {
          (printf '%s\n' "\$1"; sleep 1) | telnet ${\MPD_HOST} ${\MPD_PORT} 2>/dev/null
        }

        url="\$(youtube-dl -x -g "$link")"
        res="\$(send_mpd_command "addid \$url")"
        song_id="\$(printf '%s' "\$res" | awk -F': ' '/^Id: / { print \$2 }')"
        send_mpd_command "\$(printf 'addtagid %s Artist "%s"\naddtagid %s Title "%s"' "\$song_id" "Youtube" "\$song_id" "\$title")" >/dev/null));
    };
  }
}

sub play_audio_mpv {
  my $link = shift;
  system(qq(mpv --no-audio-display --no-video --volume=50 '$link'));
}

sub play_video_mpv {
  my $link = shift;
  detach sub {
    system(qq(mpvq '$link' >/dev/null 2>&1));
    notify 'Starting mpv', "Opening $link...";
  }
}

# How to download {{{1
sub download_bandcamp {
  my $link = shift;
  detach sub {
    my $download_dir = "$HOME/Downloads/songs/listen to";
    system(qq(mkdir -p "$download_dir"));
    chdir($download_dir);
    ( my $name = $link ) =~ s!^.*/!!;
    ( my $artist = $link ) =~ s|https*://||;
    $artist =~ s/\.bandcamp\.com.*//;

    notify( "Downloading $name by $artist", "Downloading $link" );
    system(qq(mkdir -p $artist)) unless ( -d $artist );
    chdir($artist);
    system(qq(mkdir -p $name)) unless ( -d $name );
    chdir($name);
    system qq(youtube-dl -f mp3 -o "%(playlist_index)s %(title)s %(id)s.%(ext)s" '$link' >/dev/null 2>&1);
    system(qq(printf "#EXTM3U\n#PLAYLIST:%s\n#EXTART:%s\n" "$name" "$artist" > "$name".m3u));
    system(qq(youtube-dl -f mp3 --get-filename -o "%(playlist_index)s %(title)s %(id)s.%(ext)s" '$link' >> "$name".m3u));
    notify( "Finished downloading $name by $artist",
      "Downloaded $link" );
  };
}

sub download_audio {
  my $link = shift;
  detach sub {
    my $download_dir = "$HOME/Downloads/songs/listen to";
    notify 'Download (audio) started', "Downloading $link";
    system(qq(youtube-dl --add-metadata -xic -f bestaudio/best -o "$download_dir/%(title)s-%(creator)s.%(ext)s" --exec "notify 'Download finished' 'Downloaded $link.' linkhandler" '$link' >/dev/null 2>&1));
  };
}

sub download_video {
  my $link = shift;
  my $download_dir = "$HOME/Downloads";

  my @choices = (
    ['Both', sub {
      my $link = shift;
      detach sub {
        notify 'Download (av) started', "Downloading $link";
        system(qq(youtube-dl --add-metadata -ic --write-sub --embed-subs -o "$download_dir/%(title)s-%(creator)s.%(ext)s" --exec "notify 'Download finished' 'Downloaded $link.' linkhandler" '$link' >/dev/null 2>&1));
      };
    }],
    ['Audio', \&download_audio],
    ['Video', sub {
      my $link = shift;
      detach sub {
        notify 'Download (video) started', "Downloading $link";
        system(qq(youtube-dl --add-metadata -ic -f bestvideo --write-sub --embed-subs -o "$download_dir/%(title)s-%(creator)s.%(ext)s" --exec "notify 'Download finished' 'Downloaded $link.' linkhandler" '$link' >/dev/null 2>&1));
      };
    }]
  );
  my $selected_ref = menu(\@choices);
  $selected_ref->($link);
}

# Main {{{1
if (is_bandcamp_track($LINK)) {
  my @choices = (
    ['Download', \&download_bandcamp],
    ['Play', sub {
      my $link = shift;
      my @choices = (
        ['Audio (queue in mpd)', \&play_audio_mpd],
        ['Audio (mpv)', \&play_audio_mpv]
      );

      my $selected_ref = menu(\@choices);
      $selected_ref->($link);
    }]
  );
  my $selected_ref = menu(\@choices);
  $selected_ref->($LINK);
}
elsif (is_bandcamp_album($LINK)) {
  my @choices = (
    ['Download', \&download_bandcamp]
  );
  my $selected_ref = menu(\@choices);
  $selected_ref->($LINK);
}
elsif (is_video($LINK)) {
  my @choices = (
    ['Play', sub {
      my $link = shift;

      my @choices = (
        ['Video', \&play_video_mpv],
        ['Audio (queue in mpd)', \&play_audio_mpd],
        ['Audio (mpv)', \&play_audio_mpv]
      );
      my $selected_ref = menu(\@choices);
      $selected_ref->($LINK);
    }],
    ['Download', \&download_video]
  );
  my $selected_ref = menu(\@choices);
  $selected_ref->($LINK);
}
elsif (is_image($LINK)) {
  my @choices = (
    ['View (nsxiv)', sub {
      my $link = shift;
      detach sub {
        notify 'Starting image viewer', "Opening $link...";
        system(qq(curl -sL '$link' >"/tmp/\$(printf "%s" '$link' | sed "s/.*\\///")"));
        system(qq(opener "/tmp/\$(printf "%s" '$link' | sed "s/.*\\///")" >/tmp/error 2>&1));
      }
    }]
  );
  my $selected_ref = menu(\@choices);
  $selected_ref->($LINK);
}
elsif (is_gifv($LINK)) {
  my @choices = (
    ['View (mpv)', sub {
      my $link = shift;
      detach sub {
        system(qq(mpv --volume=50 '$link' >/dev/null 2>&1));
      };
    }]
  );
  my $selected_ref = menu(\@choices);
  $selected_ref->($LINK);
}
elsif (is_audio($LINK)) {
  my @choices = (
    ['Download', \&download_audio],
    ['Play', sub {
      my $link = shift;
      my @choices = (
        ['Audio (queue in mpd)', \&play_audio_mpd],
        ['Audio (mpv)', \&play_audio_mpv]
      );

      my $selected_ref = menu(\@choices);
      $selected_ref->($link);
    }]
  );
  my $selected_ref = menu(\@choices);
  $selected_ref->($LINK);
}
elsif (checkstr($LINK, 'includes',  ['reddit.com'])) {
  my @choices = (
    ['reddio', sub {
      my $link = shift;
      # Have to go via bash here to be able to pipe to `less`
      launch_in_terminal(qq(bash -c 'reddio print -c always "comments/\$(printf "%s" '$link' | cut -d/ -f7)" | less -+F -+X'));
    }]
  );
  my $selected_ref = menu(\@choices);
  $selected_ref->($LINK);
}
elsif (checkstr($LINK, 'starts', ['http://', 'https://'])) {
  my @choices = (
    ['w3m', sub {
      my $link = shift;
      launch_in_terminal(qq(w3m -config ~/.config/w3m/config -T text/html '$link'));
    }]);
  my $selected_ref = menu(\@choices);
  $selected_ref->($LINK);
}
else {
  if ( -f $LINK ) {
    system(qq(\${EDITOR:-vim} '$LINK'));
  }
  else {
    system(qq(open '$LINK' >/dev/null 2>&1));
  }
}
