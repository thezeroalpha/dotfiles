#!/usr/bin/env ruby
# A script that lets you check build status of github pages and trigger new
# builds. You can check one or more pages at once, the script minimizes
# requests using etag values.
require 'open-uri'
require 'net/http'
require 'json'

class Page
  def initialize name
    @url = "https://api.github.com/repos/#{ENV['GITHUB_AUTH_USER']}/#{name}/pages/builds"
    @name = name
    @headers = {'Authorization' => "token #{ENV['GITHUB_AUTH_TOKEN']}"}
  end

  def get_status
    begin
      if @etag
        response = URI.open("#{@url}/latest", @headers.merge({'If-None-Match' => @etag}))
      else
        response = URI.open("#{@url}/latest", @headers)
      end
      j = JSON.parse(response.read)
      @etag = response.meta['etag']
      @code = response.status.first
      @created_at = j['created_at']
      @updated_at = j['updated_at']
      @status = j['status']
      @error = j['error']['message']
    rescue OpenURI::HTTPError => err
      if err.io.status.first == '304'
        @etag = err.io.meta['etag']
        @code = err.io.status.first
      else
        @code = err.io.status.first
      end
    end
  end

  def build
    response = Net::HTTP.post URI(@url), nil, @headers
    if response.code == '201'
      j = JSON.parse(response.body)
      @code = response.code
      @etag = response['etag']
      @status = j['status']
    else
      @code = response.code
    end
  end
  def to_str
    str = "#{@name}: #{@status}"
    str += ", #{@updated_at}" unless @updated_at.nil?
    str += ", #{@error}" unless @error.nil?
    str += "not found" if @code == '404'
    str += "."
  end
end

subcmd = ARGV.shift

if ["build", "b"].include? subcmd
  if ARGV.size > 0
    values = ARGV.map do |page|
      Thread.new do
        p = Page.new page
        p.build
        p.to_str
      end
    end.map(&:value)

    puts "Builds:"
    values.each { |v| puts v }
  else
    puts "Provide the name of one or more repositories."
  end
elsif ["watch", "w", "status", "s"].include? subcmd
  if ARGV.size > 0
    pages = ARGV.map { |p| Page.new p }
    while true
      values = pages.map do |page|
        Thread.new { page.get_status; page.to_str }
      end.map(&:value)

      system "clear"
      puts "Status:"
      values.each { |v| puts v }
    end
  else
    puts "Provide the name of one or more repositories."
  end
elsif ["rate", "remaining", "r"].include? subcmd
  response = URI.open("https://api.github.com/rate_limit", 'Authorization' => "token #{ENV['GITHUB_AUTH_TOKEN']}")
  j = JSON.parse(response.read)
  core = j['resources']['core']
  puts "Requests remaining: #{core['remaining']}/#{core['limit']}"
else
  puts <<-YEET
  Available commands:

  watch, w, status, s       print out the status of pages
  build, b                  trigger a build of a page
  rate, remaining, r        print out the number of remaining API requests
  YEET

end
