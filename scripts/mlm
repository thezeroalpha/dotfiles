#!/bin/sh
# General music library management tasks. NOT multi-level marketing.
die() { printf '%s\n' "$1" >&2 && exit 1; }
checkdeps() {
  for com in "$@"; do
    command -v "$com" >/dev/null 2>&1 \
      || { printf '%s required but not found.\n' "$com" >&2 && exit 1; }
  done
}
checkdeps rsync mpc eyeD3 ffprobe

# Check necessary variables
[ -z "$XDG_DATA_HOME" ] && die 'XDG_DATA_HOME not set.'
MPD_LOGFILE="$XDG_DATA_HOME"/mpd/mpd.log
[ -f "$MPD_LOGFILE" ] || die "$MPD_LOGFILE does not exist or is not a readable file."
[ -z "$MUSIC_DIR" ] && die 'MUSIC_DIR not set.'
[ -d "$MUSIC_DIR" ] || die "$MUSIC_DIR does not exist or is not a readable directory."
RECENTLY_ADDED_PLAYLIST="$MUSIC_DIR"/recently-added.m3u

import() {
  if [ -n "$(find . -mindepth 1 -maxdepth 1 -name '*.mp3')" ]; then
    printf "MP3 files found in current directory!\nAre you sure you want to import? [Y/n] "
    stty raw; yn="$(dd bs=1 count=1 2>/dev/null)"; stty -raw
    case "$yn" in
      Y*|y*);;
      *) die 'User cancelled.';;
    esac
  fi

  printf "Did you already run mp3gain? [Y/n] "
  stty raw; yn="$(dd bs=1 count=1 2>/dev/null)"; stty -raw
  printf '\n'
  case "$yn" in
    Y*|y*);;
    *) die 'Run it now then. mp3gain -s i. add -a for albums.';;
  esac

  # Sync current dir into music dir, (u)pdated only, (r)ecursively, (p)reserve
  #   permissions, info about whole transfer, delete originals
  printf "Moving files into library...\n"
  rsync -urp --info=progress2 --remove-source-files ./ "$MUSIC_DIR"/

  # Update the database, waiting for it to finish
  printf "Updating MPD database...\n"
  mpc -w update >/dev/null 2>&1

  # Update the recently added playlist:
  printf "Updating recently added playlist...\n"

  # Create a tempdir for the files
  tempdir="$(mktemp -d)"
  trap 'rm -r "$tempdir"' INT TERM EXIT

  # MPD logs all additions to the library, so extract from that.
  # Sort for use in comm (1)
  tac ~/.local/share/mpd/mpd.log \
    | awk -F 'added ' '/update: added/ { print $2 }' \
    | sort > "$tempdir"/sorted_newly_added.log

  # Get the current contents of the recently added playlist, without M3U metadata
  # Sort for use in comm (1)
  grep -v '^#' "$MUSIC_DIR"/recently-added.m3u > "$tempdir"/current_recently_added.m3u
  sort "$tempdir"/current_recently_added.m3u > "$tempdir"/sorted_recently_added.m3u

  # Find the lines that have been logged by MPD as added but are not yet in the recently added playlist
  #   via comm (1), excluding lines present only in file 2 (MPD logfile) and in both.
  # Then, add an M3U header, and concatenate with the current recently added playlist.
  # The result is: [M3U header, newly added tracks, rest of current recently added playlist]
  cat - "$tempdir"/current_recently_added.m3u \
    > "$MUSIC_DIR"/recently-added.m3u \
    <<PLAYLIST_END
#EXTM3U
#PLAYLIST:Recently Added
$(comm -23 "$tempdir"/sorted_newly_added.log "$tempdir"/sorted_recently_added.m3u)
PLAYLIST_END

  # Untrap
  trap - INT TERM EXIT

  printf "Done!\n"
}

verify_recently_added() {
  lns="$(wc -l < "$RECENTLY_ADDED_PLAYLIST" | tr -d '[:space:]')"
  ctr=1;
  while read -r f; do
    printf '%s' "$f" | grep '^#' >/dev/null 2>&1 && { ctr=$((ctr+1)); continue; }
    printf "\r%d/%d" $ctr "$lns"
    stat "$MUSIC_DIR/$f" >/dev/null 2>&1 || printf "\t%s\n" "$f";
    ctr=$((ctr+1));
  done < "$RECENTLY_ADDED_PLAYLIST"
}


embed_lyrics() {
  LYRICS_DIR="$HOME/.local/share/lyrics"
  [ -d "$LYRICS_DIR" ] || die "Lyrics dir $LYRICS_DIR not found."
  find "$LYRICS_DIR" -type f -size 0 -delete

  find "$LYRICS_DIR" -type f \
    | while read -r lyricsfile; do
      printf "Processing: %s\n" "$lyricsfile" \
        && fname="$(printf "%s" "${lyricsfile##*/}" | awk -F " - " '{gsub(".txt", "", $2); print "albumartist " "\"" $1 "\"" " title " "\"" $2 "\"" }' | xargs mpc find | head -n 1)" \
        && if [ -n "$fname" ]; then
             eyeD3 --to-v2.4 --remove-all-lyrics --add-lyrics "$lyricsfile" "$MUSIC_DIR/$fname" \
               && rm "$lyricsfile"
           else
             rm "$lyricsfile"
           fi
      done
}

# args: source_dir, dest_dir
# Places all MP3 files in a directory into folders based on the artist and album.
# If you want to make changes in the current dir, run `mp3-tags-to-folders . .`
organize_files() {
  [ $# -eq 2 ] || die "Arguments required: path to music directory, path to destination"
  [ -d "$1" ] || die "Path $1 is not a directory."
  src="$(realpath "$1")"
  dst="$(realpath "$2")"
  cd "$dst" || die "Could not cd to $dst"
  mkdir -p _failed
  find "$src" -name '*.mp3' 2>/dev/null | \
    while read -r i; do
      artist="$(ffprobe -loglevel error -show_entries format_tags=album_artist -of default=noprint_wrappers=1:nokey=1 "$i" | tr -d ':' | tr '+!@#$%^&*:?"\\>' '_' | sed 's/\.\.*$//')"
      [ -n "$artist" ] || { mv "$i" _failed/ && continue; }
      album="$(ffprobe -loglevel error -show_entries format_tags=album -of default=noprint_wrappers=1:nokey=1 "$i" | tr -d ':' | tr '+!@#$%^&*:?>\\/"' '_' | sed 's/\.\.*$//')"
      [ -n "$album" ] || { mv "$i" _failed/ && continue; }
      mkdir -p "$artist/$album"
      printf "%s -> %s\n" "$i" "$artist/$album"
      mv "$i" "$artist/$album"
    done
    mpc -w update >/dev/null 2>&1
    rmdir _failed 1>/dev/null 2>&1 || printf "Some tracks were not organised automatically, they are in ./_failed/"
}

case "$1" in
  import) import;;
  check-recent) verify_recently_added;;
  embed-lyrics) embed_lyrics;;
  organise|organize) organize_files "$2" "$3";;
  *) printf "Supported commands: import, check-recent, embed-lyrics, organise\n"; exit 0;;
esac
