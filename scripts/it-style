#!/usr/bin/env bash
oldifs="$IFS"
console=0
print_help() {
    echo "Options: "
    echo "-p	Currently playing in iTunes"
    echo "-s	Selected in iTunes"
    echo "-c	Console mode, supply a file and use eyeD3"
    echo "-h	Print this help text"
}
if [[ $(uname -s) != "Darwin" ]]; then
    if [ $1 != "-c" ]; then
	echo "You're not on a Mac, so this will only work with the '-c' switch (since Applescript is needed to be able to control iTunes)."
	exit 1
    fi
fi
while :; do
    if [ $# -ne 0 ]; then
	case $1 in
	    "-p")
		artist=$(osascript -e "tell application \"iTunes\" to return artist of current track");
		album=$(osascript -e "tell application \"iTunes\" to return album of current track");
		name=$(osascript -e "tell application \"iTunes\" to return name of current track");
		;;
	    "-s")
		artist=$(osascript -e "tell application \"iTunes\" to return artist of selection");
		album=$(osascript -e "tell application \"iTunes\" to return album of selection");
		name=$(osascript -e "tell application \"iTunes\" to return name of selection");
		;;
	    "-c")
		if ! command -v eyed3 &> /dev/null; then echo "Please install eyeD3." && exit 1; fi
		if [ $# -ne 2 ]; then echo "Filename required." && exit 1; fi
		if ! [ -f "$2" ]; then echo "File $2 does not exist." && exit 1; fi
		artist=$(eyed3 "$2" 2>/dev/null | grep artist | cut -d: -f2- | sed 's/^ *//g')
		name=$(eyed3 "$2" 2>/dev/null | grep title | cut -d: -f2- | sed 's/^ *//g')
		album=$(eyed3 "$2" 2>/dev/null | grep album | cut -d: -f2- | sed 's/^ *//g')
		console=1
		;;
	    "-h")
	    	print_help
	    	exit 0
		;;
	    *)
	    	echo "Unsupported argument."
	    	exit 1
		;;
	esac
    else
	echo "Which track?"
	select sc in "Selected" "Playing"; do
	    case $sc in
		Selected)
		    artist=$(osascript -e "tell application \"iTunes\" to return artist of selection");
		    if [ $? -ne 0 ]; then echo "No selection." && continue; fi
		    album=$(osascript -e "tell application \"iTunes\" to return album of selection");
		    if [ $? -ne 0 ]; then echo "No selection." && continue; fi
		    name=$(osascript -e "tell application \"iTunes\" to return name of selection");
		    if [ $? -ne 0 ]; then echo "No selection." && continue; fi
		    break;;
		Playing)
		    artist=$(osascript -e "tell application \"iTunes\" to return artist of current track");
		    if [ $? -ne 0 ]; then echo "No track playing." && continue; fi
		    album=$(osascript -e "tell application \"iTunes\" to return album of current track");
		    if [ $? -ne 0 ]; then echo "No track playing." && continue; fi
		    name=$(osascript -e "tell application \"iTunes\" to return name of current track");
		    if [ $? -ne 0 ]; then echo "No track playing." && continue; fi
		    break;;
	    esac
	done
	if [ -z "$sc" ]; then continue; fi
    fi

    if [ -z "$album" ]; then
	# If there's no album, query without an album
	search_url="https://www.discogs.com/search/?q="$(sed -e 's/ /%20/g' -e 's/&/%26/g' <<< "${artist%%feat*} $name")
	echo "Querying: \"$artist $name\" ($search_url)"
	response=$(ruby $DOTFILES/scripts/discogs -g "${artist%%feat*}" "$name");
    else
	# Otherwise, add the album to query for precision
	search_url="https://www.discogs.com/search/?q="$(sed -e 's/ /%20/g' -e 's/&/%26/g' <<< "${artist%%feat*} $album")
	echo "Querying: \"$artist $album $name\" ($search_url)"
	response=$(ruby $DOTFILES/scripts/discogs -g "${artist%%feat*}" "$album");
    fi

    # Remove brackets from the Ruby array
    response=$(sed -e 's/^\[//' -e 's/\]$//' <<< "$response")

    # Read the response into a bash array (genres, styles, url)
    IFS=',' read -ra response <<< "${response}"; unset IFS

    # Create a bash array from the genres, stripping quotes
    IFS='~' read -ra genre <<< "${response[0]//\"/}"; unset IFS
    genre=$(sed -e 's/^ //' <<< $genre)

    # Create a bash array from the styles, stripping quotes
    # potential regex to surround each style in quotes: 's/\([^~]*\)/"\1"/g'

    IFS='~' read -ra style <<< "${response[1]//\"/}"; unset IFS
    style=$(sed -e 's/^ //' <<< $style)

    # Save the url as a string, stripping quotes (and remove the brackets entered by Ruby)
    url=$(sed -e 's/^ *\[//' -e 's/\]$//' <<<${response[2]//\"/})

    # If there's no url, there's no result
    if [ -z "$url" ]; then
	echo -e "\nNot found.\n"
	echo "Please enter the genre string (format \"Genre/Style\"):"
	read finalg
	finals=""
    else
	IFS="$oldifs"

	# Give the user the source information
	echo "URL: $url"
	echo "You're changing the album \"$album\" by \"$artist\""
	printf '\n'

	# Select menu for genre
	echo "Genre options:"
	printf '%s\n' "${genre[@]}"
	printf "\nWould you like to use one of these?\n"
	select yn in "Yes" "No"; do
	    case $yn in
		Yes)
		    select opt in "${genre[@]}"; do
			case $opt in
			    *)
				finalg=$(sed -e 's/"//g' <<< $opt)
				if [[ $finalg = "Hip Hop" ]]; then finalg="Hip-Hop"; fi	# consistency
				break;;
			esac
		    done
		    break;;
		No)
		    echo "Write your own then:"
		    read finalg
		    if [[ $finalg = "Hip Hop" ]]; then finalg="Hip-Hop"; fi			# consistency
		    if [[ $finalg = "Post-Rock" ]]; then finalg="Post Rock"; fi		# consistency
		    break;;
	    esac
	done

	# Select menu for style
	if [ -z "$style" ]; then
	    echo "No style from Discogs."
	    echo "Write your own:"
	    read finals
	    finals="/$finals"
	else
	    echo "Style options:"
	    printf '%s\n' "${style[@]}"
	    printf "\nWould you like to use one of these?\n"
	    select yn in "Yes" "No" "None needed"; do
		case $yn in
		    Yes)
			select opt in "${style[@]}"; do
			    case $opt in
				*)
				    # Add a forward slash at start, remove extra spaces,
				    # also remove repetitions in genre/style like "Rock/Alternative Rock"
				    finals="/"$(echo $opt | cut -d ' ' -f1- | sed -e "s/\"//g" -e "s/ *$finalg *//")
				    break;;
			    esac
			done
			break;;
		    No)
			echo "Write your own then:"
			read finals
			finals="/$finals"
			break;;
		    "None needed")
			finals=""
			break;;
		esac
	    done
	fi

    fi

    if ! [ -z "$finalg$finals" ]; then
	# Finally, write the info to the iTunes track (AppleScript)
	# If there's an album, change the genre of the whole album
	if [ $console -eq 1 ]; then
	    eyed3 -G "$finalg$finals" "$2" &> /dev/null
	else
	    if [ -z "$album" ]; then
		osascript -e "tell application \"iTunes\" to set the genre of every track whose name is \"$name\" and artist is \"${artist}\" to \"$finalg$finals\"" > /dev/null
		# Otherwise, just change the genre of that one track
	    else
		osascript -e "tell application \"iTunes\" to set the genre of every track whose album is \"$album\" and artist is \"${artist}\" to \"$finalg$finals\"" > /dev/null
	    fi
	fi
	# ...and give a status message.
	printf "\nGenre set to: $finalg$finals\n"
    fi
    if [ $console -eq 1 ]; then exit 0; fi
done