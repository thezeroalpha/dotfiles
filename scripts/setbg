#!/bin/sh
# Set some variables
BACKGROUNDS_LIGHT="/Volumes/HDD/Pictures/Backgrounds/light"
BACKGROUNDS_DARK="/Volumes/HDD/Pictures/Backgrounds/dark"
BACKGROUNDS_DEST_DIR="$HOME/Pictures/Backgrounds"
ORIGINALS_DIR_NAME="originals" # where originals are stored after resizing
SCREEN_RESOLUTION='1440/900'
SCREEN_ASPECT_RATIO='16:10' # == 1440x900
SCREEN_ASPECT_RATIO_FLOAT="$(printf '%s\n' "$SCREEN_RESOLUTION" | bc -l)"

die() { printf '%s\n' "$1" >&2 && exit 1; }

checkdeps() {
  for com in "$@"; do
    command -v "$com" >/dev/null 2>&1 \
      || { printf '%s required but not found.\n' "$com" >&2 && exit 1; }
  done
}
checkdeps sxiv wal identify convert

# Parse command line flags
while [ $(($#)) -ne 0 ]; do
  case "$1" in
    -d|--dark)
      dark=1
      break
      ;;
    -l|--light)
      light=1
      break
      ;;
    -h|--help)
      echo "Usage:"
      echo "setbg [-d | -l | -h]"
      exit 0
      ;;
    -*) # unsupported flags
      echo "Unsupported flag $1" >&2
      exit 1
      ;;
  esac
done

# Set variables/flags for light/dark image
if [ -n "$light" ]; then
  img_dir="$BACKGROUNDS_LIGHT"
  walflags='-l --saturate 0.8'
elif [ -n "$dark" ]; then
  img_dir="$BACKGROUNDS_DARK"
  walflags=''
else
  die 'Need to choose light (-l) or dark (-d)'
fi

# Choose an image
imgpath="$(find "$img_dir" -type f -maxdepth 1 -exec stat -f "%SB %N" -t '%s' {} \; | sort -rn | cut -d' ' -f2- | sxiv -io | head -n 1)"
[ -z "$imgpath" ] && die 'Nothing selected, quitting.'
[ -f "$imgpath" ] || die "$imgpath does not exist or is not readable."

printf 'Using %s\n' "$imgpath"

# Get just the image name
imgname="${imgpath##*/}"

# Get the format, width, height
fwh="$(identify -format "%m:%w:%h" "$imgpath")"
printf 'Identified as %s\n' "$fwh"
w="$(printf %s "$fwh" | cut -d: -f2)"
h="$(printf %s "$fwh" | cut -d: -f3)"

# Calculate the aspect ratio
img_aspect_ratio="$(printf '%s/%s\n' "$w" "$h" | bc -l)"
printf 'Aspect ratio %s\n' "$img_aspect_ratio"

# Set the extension according to the format
fmt="$(printf %s "$fwh" | cut -d: -f1)"
case "$fmt" in
  JPEG) imgext='jpg';;
  PNG) imgext='png';;
  *) die "Unsupported image extension in $imgpath!"
esac

# Compare two aspect ratios (floats) via bc(1)
# will be 1 if equal, 0 if not
is_equal_aspect_ratio="$(printf '%s == %s\n' "$img_aspect_ratio" "$SCREEN_ASPECT_RATIO_FLOAT" | bc -l)"

# If the aspect ratio is different, change the aspect ratio of the image and
# back up the original
if [ "$is_equal_aspect_ratio" -eq 0 ]; then
  printf 'Resizing to %s aspect ratio\n' "$SCREEN_ASPECT_RATIO"
  mkdir -p "$img_dir/$ORIGINALS_DIR_NAME" 2>/dev/null
  [ -f "$img_dir/$ORIGINALS_DIR_NAME/$imgname" ] && die "Could not back up $imgpath, already exists in originals folder."
  printf 'convert %s -> %s/%s.%s\n' "$imgpath" "$img_dir" "$imgname" "$$"
  convert "$imgpath" -resize "$SCREEN_ASPECT_RATIO" "$img_dir/$imgname.$$"
  printf '%s -> %s/%s/\n' "$imgpath" "$img_dir" "$ORIGINALS_DIR_NAME"
  mv "$imgpath" "$img_dir/$ORIGINALS_DIR_NAME/"
  printf '%s/%s.%s -> %s/%s\n' "$img_dir" "$imgname" "$$" "$img_dir" "$imgname"
  mv "$img_dir/$imgname.$$" "$img_dir/$imgname"
fi

# Copy the image to some pre-defined location
if [ -n "$light" ]; then
  targetname="$BACKGROUNDS_DEST_DIR/light.$imgext"
else
  targetname="$BACKGROUNDS_DEST_DIR/dark.$imgext"
fi

mkdir -p "$(dirname "$targetname")" 2>/dev/null
printf "copying %s -> %s\n" "$imgpath" "$targetname"
cp -f "$imgpath" "$targetname"

# Set the background
wal -c
# I want to word split here
# shellcheck disable=SC2086
wal $walflags -i "$(realpath "$targetname")"

# If on macOS and using Alacritty, gotta do something extra to set terminal colors.
# Generated light and dark color schemes will be under the name 'light' and 'dark'
#   in the Alacritty config file.
# 1. Find the config file.
# 2. Remove the existing generated theme.
# 3. Write the new colors.
os=$(uname -s | tr '[:upper:]' '[:lower:]')
case "$os" in
  darwin*)
    # Logfile defined probably means we're using alacritty
    if [ -n "$ALACRITTY_LOG" ]; then
      # Choose the scheme name we're changing
      if [ -n "$light" ]; then scheme_name="light"
      else scheme_name="dark"; fi

      # Wal generates a shell script that defines color0..color15
      SRC="$HOME"/.cache/wal/colors.sh

      [ -e "$SRC" ] || die "Wal colors not found, exiting script. Have you executed Wal before?"
      printf "Colors found, source ready.\n"

      READLINK=$( command -v greadlink || command -v readlink )

      # Get config file
      # Default config path in Mac systems
      DEFAULT_MACOS_CONFIG="$HOME"/.config/alacritty/alacritty.yml
      [ -e "$DEFAULT_MACOS_CONFIG" ] || die "Alacritty config not found, exiting script."
      CFG="$DEFAULT_MACOS_CONFIG"
      [ -L "$DEFAULT_MACOS_CONFIG" ] && {
        printf "Following symlink to config...\n"
        CFG=$($READLINK -f "$DEFAULT_MACOS_CONFIG")
      }
      [ -f "$CFG" ] || die "$CFG does not exist or not readable."

      # Get hex colors from Wal cache
      # No need for shellcheck to check this, it comes from pywal
      # shellcheck disable=SC1090
      . "$SRC"

      # Create temp file for sed results
      tempfile=$(mktemp)
      trap 'rm $tempfile' INT TERM EXIT

      # Delete existing color declarations generated by this script
      # That means, everything from '$scheme_name: &${scheme_name}' (indendented by 4 spaces) to the next potential scheme definition (indented by 4 spaces),
      #   deleting everything that starts with 8 spaces (the next level of indentation).
      # Yes, this is currently very dependant on the file's indentation. Which is bad.
      # If the scheme definition exists, delete it
      if grep -q "$scheme_name: &${scheme_name}" "$CFG"; then
        sed <"$CFG" "/^\( \{4\}\)${scheme_name}: &${scheme_name}/,/^ \{4\}[a-z]*: &[a-z]*\$/ { /^ \{8,\}/d; }" > "$tempfile" \
          && cat "$tempfile" > "$CFG"
      # If it doesn't:
      else
        printf "There's no existing 'generated' colors, adding...\n";
        # If a 'schemes' declaration exists, place this scheme declaration under it
        if grep -q "schemes:" "$CFG"; then
          sed '/schemes:/r /dev/stdin' "$CFG" > "$tempfile" <<EOF
    $scheme_name: &$scheme_name
EOF
          cat "$tempfile" > "$CFG"
        # If not, create the full schemes declaration
        else
          cat "$CFG" - >"$tempfile" <<EOF
schemes:
    $scheme_name: &$scheme_name
EOF
          cat "$tempfile" > "$CFG"
        fi
      fi

      # Write new color definitions
      # We know $colorX is unset, we set it by sourcing pywal results above, so no need to shellcheck
      # shellcheck disable=SC2154
      { sed "/^ \{4\}$scheme_name/ r /dev/stdin" "$CFG" > "$tempfile" <<EOF
        primary:
          background: '$color0'
          foreground: '$color7'
        cursor:
          text:       '$color0'
          cursor:     '$color7'
        normal:
          black:      '$color0'
          red:        '$color1'
          green:      '$color2'
          yellow:     '$color3'
          blue:       '$color4'
          magenta:    '$color5'
          cyan:       '$color6'
          white:      '$color7'
        bright:
          black:      '$color8'
          red:        '$color9'
          green:      '$color10'
          yellow:     '$color11'
          blue:       '$color12'
          magenta:    '$color13'
          cyan:       '$color14'
          white:      '$color15'
EOF
      } && sed "/^colors: /c\\
colors: *${scheme_name}" "$tempfile" > "$CFG" \
        && rm "$tempfile"
      trap - INT TERM EXIT
      printf "'%s' exported to '%s'\n" "$SRC" "$CFG"
    fi
    ;;
esac
