#!/bin/sh
# vim: foldmethod=syntax foldlevel=1
export PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
set_macos() {
  case "$1" in
    dark) dark="true";;
    light) dark="false";;
  esac
  osascript - <<EOF
on run
  tell application "System Events"
    tell appearance preferences
      set dark mode to $dark
    end tell
  end tell
end run
EOF
}

set_iterm2() {
  PYTHONPATH='' ITERM2_COOKIE=$(osascript -e 'tell application "iTerm2" to request cookie') ~/Library/ApplicationSupport/iTerm2/iterm2env/versions/3.8.6/bin/python3 \
    - "$1" <<EOF
import iterm2
from sys import argv
async def main(connection):
    profiles = [p for p in await iterm2.PartialProfile.async_query(connection) if p.name.startswith("Default ")]
    if len(argv) > 1:
        theme = str(argv[1])
    else:
        import subprocess
        result = subprocess.run(['osascript', '-e', 'tell application "System Events" to tell appearance preferences to return (get dark mode as text)'], stdout=subprocess.PIPE)
        theme = str(result.stdout.rstrip().decode("utf-8"))
    for p in profiles:
        if "Light" in p.name and theme == "light":
            await p.async_make_default()
            return
        elif "Dark" in p.name and theme == "dark":
            await p.async_make_default()
            return
try:
    iterm2.run_until_complete(main)
except Exception as exception:
    print("Error: ", exception)
EOF
}

set_gtk() {
  mkdir -p ~/.config/gtk-2.0 ~/.config/gtk-3.0
  [ -f $DOTFILES/gtk-2.0/"$1" ] && ln -sf $DOTFILES/gtk-2.0/"$1" ~/.config/gtk-2.0/theme
  [ -f $DOTFILES/gtk-3.0/"$1".ini ] && ln -sf $DOTFILES/gtk-3.0/"$1".ini ~/.config/gtk-3.0/settings.ini
}

set_sioyek() {
  sioyek_config="$(realpath ~/.config/sioyek/prefs_user.config)"
  if [ -f "$sioyek_config" ]; then
    sed "/source .*\.config/s!\./.*\.config!./$1.config!" "${sioyek_config}" > "${sioyek_config}.new" \
      && mv "${sioyek_config}.new" "${sioyek_config}"
  fi
}

set_emacs() {
  pgrep emacsclient >/dev/null 2>&1 \
    && emacsclient -d $DISPLAY -nw -e "(progn (za/$1-theme) (kill-terminal))"
}

# Change the 'colors' setting in the Alacritty config
alacritty_change_theme() {
  # Look up the config file
  DEFAULT_MACOS_CONFIG="$HOME"/.config/alacritty/alacritty.yml
  CFG="$DEFAULT_MACOS_CONFIG"
  [ -L "$DEFAULT_MACOS_CONFIG" ] && {
    printf "Following symlink to config...\n"
      CFG=$($READLINK -f "$DEFAULT_MACOS_CONFIG")
    }

  # Replace 'colors: ...' with 'colors: *(dark|light)' depending on theme
  tmpfile=$(mktemp)
  trap 'rm $tmpfile' INT TERM EXIT
  sed "/^colors: /c\\
colors: *${1}" "$CFG" > "$tmpfile" \
    && cat "$tmpfile" > "$CFG" \
    && rm "$tmpfile"
  trap - INT TERM EXIT
}

set_terminal_and_wallpaper() {
  if [ "$1" = "light" ]; then
    wal --saturate 0.8 -i "$(realpath ~/Pictures/Backgrounds/light.jpg)" -l;
  else
    wal -i "$(realpath ~/Pictures/Backgrounds/dark.jpg)";
  fi
}

set_p10k() {
  [ -f ~/.dotfiles/shell/p10k-"$1".zsh ] && ln -sf ~/.dotfiles/shell/p10k-"$1".zsh ~/.p10k.zsh
}

set_tmux() {
  [ -f ~/.dotfiles/tmux/tmux-"$1".conf ] && ln -sf ~/.dotfiles/tmux/tmux-"$1".conf ~/.config/tmux/tmux.conf
}

[ $# -eq 1 ] || { printf "Arguments: dark, light\n" && exit 1; }
case "$1" in
  dark)
    theme="dark";;
  light)
    theme="light";;
  toggle)
    if [ -f "$HOME/.config/dark-theme" ]; then theme="light"
    else theme="dark"; fi;;
  *) printf "Arguments: dark, light\n" && exit 1;;
esac

case "$theme" in
  light) rm "$HOME/.config/dark-theme";;
  dark) touch "$HOME/.config/dark-theme";;
esac

os=$(uname -s | tr '[:upper:]' '[:lower:]')
set_terminal_and_wallpaper "$theme"
case "$os" in
  darwin*)
    set_macos "$theme"
    # I don't use iterm2
    # set_iterm2 "$theme"
    alacritty_change_theme "$theme"
    ;;
  linux*)
    set_gtk "$theme"
    ;;
esac

set_p10k "$theme"
set_tmux "$theme"
set_emacs "$theme"
set_sioyek "$theme"
exit 0
