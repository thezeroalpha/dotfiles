#!/usr/bin/env ruby
require_relative './libpocket.rb'
def usage
  puts <<~HEREDOC
    Usage: pocket command [arg1 [arg2...]]

    Commands:
    save [URL]\tsave URL to Pocket (can also read list of URLs from stdin)
    audio [n]\tget n recently saved audio URLs (if n is negative, get oldest)
    video [n]\tget n recently saved video URLs (if n is negative, get oldest)
    articles [n]\tget n recently saved article URLS (if n is negative, get oldest)
    list [n]\tlist n recently saved URLs (if n is negative, get oldest)
  HEREDOC
end

if ARGV.empty?
  usage
  exit 1
end

def get_count_sort(args)
  begin
    count = Integer(args[1])
  rescue TypeError
    die 'Second argument must be an integer.'
  end
  return { count: count.abs, sort: 'oldest' } if count.negative?

  { count: count.abs }
end
def article_list_to_s(article_list)
  article_list.to_a.inject([]) do |lines, article|
    lines << "#{article['resolved_title']}\t#{article['resolved_url']}"
  end.join("\n")
end


pocket = Pocket.new
if ARGV[0] == 'save'
  if $stdin.stat.pipe?
    urls = $stdin.readlines
    die 'save: URL required' if urls.empty?
    urls.each { |url| pocket.save url }
  else
    die 'save: URL required' unless ARGV[1]
    pocket.save ARGV[1]
  end
elsif ARGV[0].start_with? 'audio'
  params = { domain: '*.bandcamp.com', contentType: 'article' }.merge(get_count_sort(ARGV))
  print article_list_to_s(pocket.retrieve_list(params))
elsif ARGV[0].start_with? 'video'
  params = { contentType: 'video' }.merge(get_count_sort(ARGV))
  print article_list_to_s(pocket.retrieve_list(params))
elsif ARGV[0].start_with? 'article'
  if ARGV[1]
    params = { contentType: 'article' }.merge(get_count_sort(ARGV))
    print article_list_to_s(pocket.retrieve_list(params))
  else
    print article_list_to_s(pocket.retrieve_list(contentType: 'article'))
  end
elsif ARGV[0].start_with? 'list'
  if ARGV[1]
    print article_list_to_s(pocket.retrieve_list(get_count_sort(ARGV)))
  else
    print article_list_to_s(pocket.retrieve_list({}))
  end
else
  die "Command '#{ARGV[0]}' not recognised."
end
