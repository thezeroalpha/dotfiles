#!/usr/bin/env bash
# vim: foldmethod=marker foldlevel=0:

# Function/variable definitions {{{
casks=0
formulas=0
select_casks=0

TICK="\e[1;32m\u2714\e[0m"
CROSS="\e[1;31m\u2718\e[0m"

echo_succ() {
   echo -e "[ $TICK ] \e[1;32m$1\e[0m"
}
echo_err() {
   echo -e "[ $CROSS ] \e[1;31m$1\e[0m"
}
echo_warn() {
   echo -e "[\e[1;34m!!!\e[0m] \e[1;34m$1\e[0m"
}
echo_progress() {
   echo -e "[\e[1;36m...\e[0m] \e[1;36m$1\e[0m"
}
hr() {
   cols=$(tput cols)
   printf '#%.0s' $(seq 1 "$cols")
}
# }}}

echo_progress "### STARTING UPDATE SCRIPT ###\n"

# Parse options/arguments {{{
while getopts "hfcms" opt; do
   case "$opt" in
      c)
         casks=1
         ;;
      f)
         formulas=1
         ;;
      s)
         select_casks=1
         ;;
      m)
         maintenance=1
         ;;
      h|*)
         echo "Update your Homebrew, Mac App Store, NPM, and PIP packages in one place."
         echo "Usage: updatemaster [-aAcCfFsh]"
         echo "Options:"
         echo "-c:		Upgrade all casks, without prompting."
         echo "-f:		Upgrade all formulas, without prompting."
         echo "-s:		Select which casks to upgrade."
         echo "-h:		Show this help text."
         echo
         echo "Options can be combined. For example:"
         echo "  updatemaster -fs"
         echo "Would update all formulas, and ask you to select which casks to upgrade."
         exit 0 
         ;;
   esac
done
# }}}

# Set up notification method {{{
if ! command -v notify &> /dev/null; then
   if command -v terminal-notifier &> /dev/null; then
      notify() { terminal-notifier -title "$1" -message "$2" -activate com.googlecode.iterm2; }
   else
      echo_warn "terminal-notifier not found, defaulting to bell. Install terminal-notifier to get the most out of this script."
      notify() { echo -e '\a'; }
   fi
fi
# }}}

# Homebrew {{{
echo_progress "Homebrew update/upgrade."
if command -v brew &> /dev/null; then
   brew update;
   brew update > /dev/null;
   outdated="$(brew outdated)"
   outdated_c="$(brew cask outdated --greedy)"
   echo

   # Programs {{{
   if [ $casks = 0 ] && [ $formulas = 0 ] && [ $select_casks = 0 ]; then
      echo_succ  "No programs will be updated." 
   elif [ ${#outdated} = 0 ]; then
      echo -e "No programs to update." 
   else
      echo -e "To update:\n"
      brew outdated;
      notify "Brew: Finished reading updates" "Click to view outdated packages."
      if [ $formulas = 1 ]; then
         brew upgrade
      fi
   fi
   # }}}

   # Casks {{{
   if [ ${#outdated_c} = 0 ]; then
      echo_succ "No casks to update." 
   elif [ $casks = 0 ] && [ $select_casks = 1 ]; then
      echo_succ "No casks will be updated."
   else
      echo -e "Casks to update:"
      brew cask outdated --greedy;

      notify "Cask: Finished reading updates" "Click to view outdated casks."
      if [ $casks = 1 ] && [ $select_casks = 0 ]; then
         brew cask upgrade --greedy
      elif [ $select_casks = 1 ]; then
         read -rp "Casks to upgrade (empty string cancels upgrade): " -a CASKS;
         for i in "{CASKS[@]}"; do
            if ! brew cask upgrade "$i"; then echo -e "Could not upgrade cask $i."; fi
         done 
      else
         if [ $maintenance = 0 ]; then
            read -rsn 1 -p "Upgrade all? [Y(es)/n(o)/s(elect)] " CONF

            case $CONF in
               [Ss] | [Ss]elect )
                  echo
                  read -rp "Which casks would you like to upgrade? " -a CASKS;
                  for i in "${CASKS[@]}"; do
                     if ! brew cask upgrade "$i"; then echo -e "Could not upgrade cask $i."; fi
                  done 
                  ;;
               [Yy] | [Yy]es )
                  echo -e "\nContinuing with cask upgrade."
                  brew cask upgrade --greedy;
                  ;; 
               * )
                  echo -e "\nCancelled cask upgrade."
                  ;;
            esac
         fi
      fi
   fi
   # }}}

   # Final steps & cleanup {{{
   brew cleanup -s --prune-prefix;
   brew doctor;
   brew missing;

   echo "Homebrew cache disk usage:"
   du -h "$(brew --cache)"
   echo "Remove with:"
   # shellcheck disable=SC2016
   echo ' rm -rf $(brew --cache)'

   echo "Backing up Brew installation..."
   brew bundle dump --force --file=~/.dotfiles/Brewfile;

   echo_succ "Backup complete."
   notify "Brewed." "All packages have been upgraded.";
   # }}}
else
   echo_err "brew not found."
   echo_err "Cannot upgrade Homebrew packages. Please do so manually."
fi
# }}}

hr

# Mac App Store (MAS) {{{
echo_progress "MAS update/upgrade."
if command -v mas &> /dev/null; then
   echo -e "MAS outdated:"
   outdated=$(mas outdated)

   if [ ${#outdated} = 0 ]; then
      echo_succ "Everything is up to date."
   else
      mas outdated
      read -rsn 1 -p "Continue? [Y/n]" CONF

      case $CONF in
         [Yy] )
            echo_succ -e "Continuing with mas upgrade."
            mas upgrade;
            ;;

         * )
            echo -e "Cancelled mas upgrade."
            ;;
      esac
      notify "MAS Updated." "All apps at newest version."
   fi
else
   echo_err -e "mas not found. Install mas to update App Store apps on the command line."
   echo_err -e "Cannot update Mac App Store apps. Please do so manually."
fi
# }}}

hr

# Global NPM packages {{{
echo_progress "NPM global update/upgrade."
if command -v npm &> /dev/null; then
   outdated=$(npm outdated)
   if [ ${#outdated} = 0 ]; then
      echo_succ "Everything is up to date."
   else
      npm update -g
      npm install -g npm
      notify "NPM Update Finished" "See Terminal for info."
   fi
   npm cache verify
   echo_succ "NPM update complete."
else
   echo_err "npm not found."
   echo_err "Cannot update NPM packages. Please do so manually."
fi
# }}}

hr

# Atom editor packages {{{
if command -v apm &> /dev/null; then
   echo_progress "Atom package upgrades"
   if apm outdated &> /dev/null; then
      apm upgrade --no-confirm;
      echo_succ "All packages upgraded."
   else
      echo_err "Cannot upgrade Atom packages. Please do so manually."
   fi
   notify "APM Upgrade Complete" "See Terminal for info."
else
   echo_err "Atom not installed (or APM not functioning properly)."
fi
# }}}

hr

echo_succ "All systems checked."
notify "All systems checked." "Everything you indicated should be upgraded."
