#!/usr/local/bin/bash
echo -e "### STARTING UPDATE SCRIPT ###\n"

# Set default variables
OPTIND=1
all_casks=0
no_casks=0
all_formulas=0
no_formulas=0
all=0
none=0
select_casks=0
sudo_auth=0

# Get passed options/arguments
while getopts "fcashFAC" opt; do
    case "$opt" in
    c)
        all_casks=1
        ;;
    f)
        all_formulas=1
        ;;
    a)
        all=1
        ;;
    s)
        select_casks=1
        ;;
    F)
	no_formulas=1
	;;
    C)
	no_casks=1
	;;
    A)
	none=1
	;;
    h)
        echo "Update your Homebrew, Mac App Store, NPM, and PIP packages in one place."
        echo "Usage: updatemaster [-aAcCfFsh]"
        echo "Options:"
        echo "-c:		Upgrade all casks, without prompting."
        echo "-C:		Don't update any casks."
        echo "-f:		Upgrade all formulas, without prompting."
        echo "-F:		Don't upgrade any formulas."
        echo "-a:		Upgrade all casks and formulas."
        echo "-A:		Don't upgrade any Brew programs (maintenance only)."
        echo "-s:		Select which casks to upgrade."
        echo "-h:		Show this help text."
        echo
        echo "Options can be combined. For example:"
        echo "  updatemaster -fs"
        echo "Would update all formulas, and ask you to select which casks to upgrade."
        exit 0 
        ;;
    *)
        ;;
    esac
done
        
### SET UP NOTIFY ###
if ! command -v notify &> /dev/null; then
    if command -v terminal-notifier &> /dev/null; then
        notify() { terminal-notifier -title "$1" -message "$2" -activate com.googlecode.iterm2; }
    else
        echo -e "terminal-notifier not found, defaulting to bell. Install terminal-notifier to get the most out of this script."
        notify() { echo -e '\a'; }
    fi
fi

### Pre-authorise sudo ###
echo -e "Root permissions will be needed for global pip update.\n"
if sudo -v; then
    sudo_auth=1
else
    sudo_auth=0
fi
echo

### HOMEBREW ###
echo -e "-- Homebrew update/upgrade."
if command -v brew &> /dev/null; then
    brew update;
    brew update > /dev/null;
    outdated="$(brew outdated)"
    outdated_c="$(brew cask outdated --greedy)"
    echo

    # Potentially upgrade programs
    if [ $no_formulas = 1 ] || [ $none = 1 ]; then
	echo -e "\nNo programs will be updated." 
    elif [ ${#outdated} = 0 ]; then
        echo -e "No programs to update." 
    else
        echo -e "To update:\n"
        brew outdated;
        notify "Brew: Finished reading updates" "Click to view outdated packages."
        if [ $all_formulas = 1 ] || [ $all = 1 ]; then
            brew upgrade
        else
            echo; read -sn 1 -p "Continue? [Y/n]" CONF

            case $CONF in
                [yY] )
                    echo -e "\nContinuing with brew upgrade."
                    brew upgrade;
                    ;;
                * )
                    echo -e "\nCancelled brew upgrade."
                    ;;
            esac
        fi
    fi

    # Potentially upgrade casks
    if [ ${#outdated_c} = 0 ]; then
        echo -e "No casks to update." 
    elif [ $no_casks = 1 ] || [ $none = 1 ]; then
	echo -e "\nNo casks will be updated."
    else
        echo -e "Casks to update:"
        brew cask outdated --greedy;
        notify "Cask: Finished reading updates" "Click to view outdated casks."
        if [ $all_casks = 1 ] || [ $all = 1 ]; then
            brew cask upgrade --greedy
        elif [ $select_casks = 1 ]; then
           read -p "Casks to upgrade (empty string cancels upgrade): " -a CASKS;
             for i in ${CASKS[@]}; do
                 if ! brew cask upgrade $i; then echo -e "Could not upgrade cask $i."; fi
             done 
        else
            read -sn 1 -p "Upgrade all? [Y(es)/n(o)/s(elect)] " CONF

            case $CONF in
                [Ss] | [Ss]elect )
                    echo
                    read -p "Which casks would you like to upgrade? " -a CASKS;
                    for i in ${CASKS[@]}; do
                        if ! brew cask upgrade $i; then echo -e "Could not upgrade cask $i."; fi
                    done 
                    ;;
                [Yy] | [Yy]es )
                    echo -e "\nContinuing with cask upgrade."
                    brew cask upgrade --greedy;
                    ;; 
                * )
                    echo -e "\nCancelled cask upgrade."
                    ;;
            esac
        fi
    fi

    # Final steps & cleanup
    brew cleanup -s;
    brew cask cleanup;
    brew prune;
    brew doctor;
    brew missing;
    notify "Brewed." "All packages have been upgraded.";
else
    echo -e "brew not found."
    echo -e "Cannot upgrade Homebrew packages. Please do so manually."
fi

### Mac App Store (MAS) ###
echo -e "\n-- MAS update/upgrade."
if command -v mas &> /dev/null; then
    echo -e "MAS outdated:"
    outdated=$(mas outdated)

    if [ ${#outdated} = 0 ]; then
        echo -e "\nEverything is up to date."
    else
       mas outdated
       read -sn 1 -p "Continue? [Y/n]" CONF

        case $CONF in
            [Yy] )
                echo -e "\nContinuing with mas upgrade."
                mas upgrade;
                ;;

            * )
                echo -e "\nCancelled mas upgrade."
                ;;
        esac
        notify "MAS Updated." "All apps at newest version."
    fi
else
    echo -e "\nmas not found. Install mas to update App Store apps on the command line."
    echo -e "\nCannot update Mac App Store apps. Please do so manually."
fi

### NPM ###
echo -e "\n-- NPM update/upgrade."
if command -v npm &> /dev/null; then
    outdated=$(npm outdated)
    if [ ${#outdated} = 0 ]; then
        echo -e "\nEverything is up to date."
    else
        npm update -g
        notify "NPM Update Finished" "See Terminal for info."
    fi
else
    echo -e "\nnpm not found."
    echo -e "\nCannot update NPM packages. Please do so manually."
fi

### PIP3 ###
echo -e "\n-- PIP3 update/upgrade."
if command -v pip3 list &> /dev/null; then
    pip3 list --outdated | cut -d ' ' -f1 | xargs -n1 pip3 install -U
    notify "Pip3 Update Finished" "See Terminal for info."
else
    echo -e "\nCannot upgrade pip3 packages. Please do so manually."
fi

### PIP ###
echo -e "-- PIP update/upgrade."
if command -v pip list &> /dev/null; then
    if pip freeze; then
        pip freeze — local | grep -v '^\-e' | cut -d = -f 1 | xargs pip install -U
    else
        echo -e "Cannot upgrade pip packages. Please do so manually."
    fi
    notify "Pip Update Finished" "See Terminal for info."
else
    echo -e "Cannot upgrade pip packages. Please do so manually."
fi

### SUDO PIP ###
echo -e "\n-- Global pip."
if [ $sudo_auth -eq 1 ]; then
    if command -v sudo -H pip list &> /dev/null; then
        sudo -H pip freeze | grep -v '^\-e' | cut -d = -f 1 | xargs sudo -H pip install -U
    else
        echo -e "Cannot upgrade global pip packages. Please do so manually."
    fi
else
    echo -e "Sudo not authorised."
fi

### TLDR Database ###
if command -v tldr &> /dev/null; then
    echo -e "\n-- TLDR database update"
    tldr --update
    echo "Exit code: $?"
fi

echo -e "\n-- All systems checked."
notify "All systems checked." "Everything you indicated should be upgraded."
