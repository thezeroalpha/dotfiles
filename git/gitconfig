; vim: syntax=gitconfig
[include]
  path = identity
  ; this file isn't in the repo
  ; sets user.name, user.email, and init.templatedir

[alias]
    s = status
    v = "!vim -c 'Gstatus | only'"
    co = checkout
    cob = checkout -b
    f = fetch --all
    fapr = fetch --all --prune
    b = branch
    br = branch --remote
    ba = branch --all
    bv = branch -vv

    lg = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --branches --remotes --tags --oneline --author-date-order
    lgv = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''%w(130,10,10)%C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all --author-date-order
    lgvv = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''%w(130,13,13)%C(white)%s%C(reset) %C(dim white)- %an <%ce> (comm. %cn <%ce>)%C(reset)%n''%w(64,18,18)%b'  --all
    today = lgv --since='midnight'
    yesterday = lgv --since='yesterday midnight' --until='midnight'
    this-week = lgv --since='last-monday'
    past-week = lgv --since='1 weeks ago'
    cbsr-sprint = lgv --since='last-tuesday' --until='this-tuesday'
    adog = log --all --decorate --oneline --graph

    authors = !git log --all --format='%cN <%cE>' | sort -u

    a = add
    ap = add -p
    af = "!git ls-files -m -o --exclude-standard | fzf --print0 -m --reverse --height=20% | xargs -0 -t -o git add"
    fa = af
    fzf = "!git ls-files -mo --exclude-standard | fzf -m --reverse --height=20%"

    c = commit
    cm = commit -m
    cam = commit -a -m
    ca = commit -a
    camende = commit --amend
    camend = commit --amend --no-edit
    cp = commit -p

    rp = reset -p

    ss = "!f(){ git stash push \"$@\" -- $(git diff --staged --name-only); }; f"
    sp = stash pop
    sa = stash apply
    sd = stash drop
    sl = stash list

    diffs = "diff --staged"
    changes = diff --summary --stat
    changess = changes --staged
    mergetest = merge --no-commit
    testmerge = mergetest
    mno = merge --no-ff
    mff = merge --ff-only
    delete-merged = "!git checkout master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d && git fetch --all --prune"
    p = push
    pushf = push --force-with-lease
    pf = "!git-pull-menu"
    fuckit = reset --hard HEAD
    fuckitall = reset --hard origin/master
    ssh = "!git remote get-url origin | sed -E 's|^https?://([^/]+)/(.+)|git@\\1:\\2|' | tr -d '\n'"
    home = "!f(){ git remote get-url \"${1:-origin}\" | sed -E 's|^git@([^:]+):|https://\\1/|' | tr -d '\n'; }; f"
    open = "!f(){ open $(git home \"$1\"); }; f"
    dad = "!curl https://icanhazdadjoke.com/ && echo && git add"
    reignore = "!git rm -r --cached .; git add ."
    rb = "rebase --committer-date-is-author-date"
    lfs-refs = "!git fetch --all && git log -p --all -S"
    chp = cherry-pick
    chpn = cherry-pick --no-commit

    la = "!git config -l | grep alias | cut -c 7-"
    rv = remote -v

    subget = submodule update --init
    subdate = submodule update --remote
    substatus = submodule status
    subactive = "!git submodule status | grep -v '^-'"
    subdel = "!f(){ set -x; git submodule deinit -f "$1"; rm -rf .git/modules/"$1"; git rm -f "$1"; set +x; }; f"

    root = !git rev-parse --show-toplevel | tr -d '\n'

    edit-changed = "!$EDITOR `git status --porcelain | sed -ne 's/^ M //p'`"
    commit-at = "!f(){\
    if [ $# -eq 0 ]; then\
    echo \"Date format: YYYY-MM-DD HH:MM:SS\";\
    else\
    GIT_COMMITTER_DATE=\"$1\" GIT_AUTHOR_DATE=\"$1\" git commit;\
    fi; }; f"

    df = !git --git-dir=$DOTFILES/.git --work-tree=$DOTFILES

[merge]
    tool = vimdiff

[core]
    autocrlf = input

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
[init]
	defaultBranch = master
